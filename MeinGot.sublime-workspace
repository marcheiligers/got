{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"U",
				"UNIT_TYPE"
			],
			[
				"pro",
				"prototype"
			],
			[
				"Har",
				"Harrenhal"
			],
			[
				"neigh",
				"neighbour"
			]
		]
	},
	"buffers":
	[
		{
			"file": "models/map.js",
			"settings":
			{
				"buffer_size": 4144,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/memoize.js",
			"settings":
			{
				"buffer_size": 199,
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/army.js",
			"settings":
			{
				"buffer_size": 405,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/map_test.js",
			"settings":
			{
				"buffer_size": 2358,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 640 files for \"console\"\n\n/home/andre/Projects/got/server.js:\n   27  \n   28  app.listen(3030, function() {\n   29:   console.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\n   30  });\n   31  \n\n/home/andre/Projects/got/node_modules/.bin/express:\n  187    , ''\n  188    , 'app.listen(3000);'\n  189:   , 'console.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);'\n  190    , ''\n  191  ].join(eol);\n  ...\n  255  \n  256  function createApplicationAt(path) {\n  257:   console.log();\n  258    process.on('exit', function(){\n  259:     console.log();\n  260:     console.log('   dont forget to install dependencies:');\n  261:     console.log('   $ cd %s && npm install', path);\n  262:     console.log();\n  263    });\n  264  \n  ...\n  352  function write(path, str) {\n  353    fs.writeFile(path, str);\n  354:   console.log('   \\x1b[36mcreate\\x1b[0m : ' + path);\n  355  }\n  356  \n  ...\n  380      process.stdout.write(msg);\n  381    } else {\n  382:     console.log(msg);\n  383    }\n  384  \n  ...\n  400    mkdirp(path, 0755, function(err){\n  401      if (err) throw err;\n  402:     console.log('   \\033[36mcreate\\033[0m : ' + path);\n  403      fn && fn();\n  404    });\n  ...\n  412  \n  413  function abort(str) {\n  414:   console.error(str);\n  415    process.exit(1);\n  416  }\n\n/home/andre/Projects/got/node_modules/.bin/jade:\n   32  \n   33  program.on('--help', function(){\n   34:   console.log('  Examples:');\n   35:   console.log('');\n   36:   console.log('    # translate jade the templates dir');\n   37:   console.log('    $ jade templates');\n   38:   console.log('');\n   39:   console.log('    # create {foo,bar}.html');\n   40:   console.log('    $ jade {foo,bar}.jade');\n   41:   console.log('');\n   42:   console.log('    # jade over stdio');\n   43:   console.log('    $ jade < my.jade > my.html');\n   44:   console.log('');\n   45:   console.log('    # jade over stdio');\n   46:   console.log('    $ echo \"h1 Jade!\" | jade');\n   47:   console.log('');\n   48:   console.log('    # foo, bar dirs rendering to /tmp');\n   49:   console.log('    $ jade foo bar --out /tmp ');\n   50:   console.log('');\n   51  });\n   52  \n   ..\n   80  \n   81  if (files.length) {\n   82:   console.log();\n   83    files.forEach(renderFile);\n   84:   process.on('exit', console.log);\n   85  // stdio\n   86  } else {\n   ..\n  131            fs.writeFile(path, output, function(err){\n  132              if (err) throw err;\n  133:             console.log('  \\033[90mrendered \\033[36m%s\\033[0m', path);\n  134            });\n  135          });\n\n/home/andre/Projects/got/node_modules/.bin/nodeunit:\n    8  //       lands in core.\n    9  //\n   10: // Until then, use console.log from npm (https://gist.github.com/1077544)\n   11: require('../deps/console.log');\n   12  \n   13  //require.paths.push(process.cwd());\n   ..\n   83              return reporter_file !== 'index';\n   84          });\n   85:         console.log('Build-in reporters: ');\n   86          reporters.forEach(function (reporter_file) {\n   87              var reporter = require('../lib/reporters/' + reporter_file);\n   88:             console.log('  * ' + reporter_file + (reporter.info ? ': ' + reporter.info : ''));\n   89          });\n   90          process.exit(0);\n   ..\n   92          var content = fs.readFileSync(__dirname + '/../package.json', 'utf8');\n   93          var pkg = JSON.parse(content);\n   94:         console.log(pkg.version);\n   95          process.exit(0);\n   96      } else if ((arg === '-h') || (arg === '--help')) {\n   97:         console.log(usage);\n   98          process.exit(0);\n   99      } else {\n  ...\n  103  \n  104  if (files.length === 0) {\n  105:     console.log('Files required.');\n  106:     console.log(usage);\n  107      process.exit(1);\n  108  }\n\n/home/andre/Projects/got/node_modules/express/bin/express:\n  187    , ''\n  188    , 'app.listen(3000);'\n  189:   , 'console.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);'\n  190    , ''\n  191  ].join(eol);\n  ...\n  255  \n  256  function createApplicationAt(path) {\n  257:   console.log();\n  258    process.on('exit', function(){\n  259:     console.log();\n  260:     console.log('   dont forget to install dependencies:');\n  261:     console.log('   $ cd %s && npm install', path);\n  262:     console.log();\n  263    });\n  264  \n  ...\n  352  function write(path, str) {\n  353    fs.writeFile(path, str);\n  354:   console.log('   \\x1b[36mcreate\\x1b[0m : ' + path);\n  355  }\n  356  \n  ...\n  380      process.stdout.write(msg);\n  381    } else {\n  382:     console.log(msg);\n  383    }\n  384  \n  ...\n  400    mkdirp(path, 0755, function(err){\n  401      if (err) throw err;\n  402:     console.log('   \\033[36mcreate\\033[0m : ' + path);\n  403      fn && fn();\n  404    });\n  ...\n  412  \n  413  function abort(str) {\n  414:   console.error(str);\n  415    process.exit(1);\n  416  }\n\n/home/andre/Projects/got/node_modules/express/lib/view.js:\n  452  \n  453  function hintAtViewPaths(view, options) {\n  454:   console.error();\n  455:   console.error('failed to locate view \"' + view.view + '\", tried:');\n  456    options.attempts.forEach(function(path){\n  457:     console.error('  - %s', path);\n  458    });\n  459:   console.error();\n  460  }\n  461  \n\n/home/andre/Projects/got/node_modules/express/node_modules/connect/lib/http.js:\n  158  \n  159          // output to stderr in a non-test env\n  160:         if ('test' != env) console.error(err.stack || err.toString());\n  161  \n  162          // unable to respond\n  ...\n  208      } catch (e) {\n  209        if (e instanceof assert.AssertionError) {\n  210:         console.error(e.stack + '\\n');\n  211          next(e);\n  212        } else {\n\n/home/andre/Projects/got/node_modules/express/node_modules/connect/lib/middleware/errorHandler.js:\n   55    return function errorHandler(err, req, res, next){\n   56      res.statusCode = 500;\n   57:     if (dumpExceptions) console.error(err.stack);\n   58      if (showStack) {\n   59        var accept = req.headers.accept || '';\n\n/home/andre/Projects/got/node_modules/express/node_modules/connect/lib/middleware/profiler.js:\n   60  \n   61  function compare(req, start, end) {\n   62:   console.log();\n   63    row(req.method, req.url);\n   64    row('response time:', (end.time - start.time) + 'ms');\n   ..\n   67    row('heap before:', formatBytes(start.mem.heapUsed) + ' / ' + formatBytes(start.mem.heapTotal));\n   68    row('heap after:', formatBytes(end.mem.heapUsed) + ' / ' + formatBytes(end.mem.heapTotal));\n   69:   console.log();\n   70  }\n   71  \n   ..\n   79  \n   80  function row(key, val) {\n   81:   console.log('  \\033[90m%s\\033[0m \\033[36m%s\\033[0m', key, val);\n   82  }\n   83  \n\n/home/andre/Projects/got/node_modules/express/node_modules/connect/lib/middleware/session.js:\n  211    // meant for a production environment\n  212    if ('production' == env && store instanceof MemoryStore) {\n  213:     console.warn(warning);\n  214    }\n  215  \n\n/home/andre/Projects/got/node_modules/express/node_modules/connect/node_modules/formidable/benchmark/bench-multipart-parser.js:\n   47      mbPerSec = (mb / (duration / 1000)).toFixed(2);\n   48  \n   49: console.log(mbPerSec+' mb/sec');\n   50  \n   51  assert.equal(nparsed, buffer.length);\n\n/home/andre/Projects/got/node_modules/express/node_modules/connect/node_modules/formidable/example/post.js:\n   25        })\n   26        .on('field', function(field, value) {\n   27:         console.log(field, value);\n   28          fields.push([field, value]);\n   29        })\n   30        .on('end', function() {\n   31:         console.log('-> post done');\n   32          res.writeHead(200, {'content-type': 'text/plain'});\n   33          res.end('received fields:\\n\\n '+util.inspect(fields));\n   ..\n   41  server.listen(TEST_PORT);\n   42  \n   43: console.log('listening on http://localhost:'+TEST_PORT+'/');\n   44  \n\n/home/andre/Projects/got/node_modules/express/node_modules/connect/node_modules/formidable/example/upload.js:\n   24      form\n   25        .on('field', function(field, value) {\n   26:         console.log(field, value);\n   27          fields.push([field, value]);\n   28        })\n   29        .on('file', function(field, file) {\n   30:         console.log(field, file);\n   31          files.push([field, file]);\n   32        })\n   33        .on('end', function() {\n   34:         console.log('-> upload done');\n   35          res.writeHead(200, {'content-type': 'text/plain'});\n   36          res.write('received fields:\\n\\n '+util.inspect(fields));\n   ..\n   46  server.listen(TEST_PORT);\n   47  \n   48: console.log('listening on http://localhost:'+TEST_PORT+'/');\n   49  \n\n/home/andre/Projects/got/node_modules/express/node_modules/connect/node_modules/formidable/tool/record.js:\n    5  var server = http.createServer(function(req, res) {\n    6    var socket = req.socket;\n    7:   console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n    8  \n    9    req.on('end', function() {\n   ..\n   36    socket.pipe(socket.file);\n   37  \n   38:   console.log('--> %s', socket.filename);\n   39    socket.on('close', function() {\n   40:     console.log('<-- %s', socket.filename);\n   41    });\n   42  });\n   ..\n   44  var port = process.env.PORT || 8080;\n   45  server.listen(port, function() {\n   46:   console.log('Recording connections on port %s', port);\n   47  });\n   48  \n\n/home/andre/Projects/got/node_modules/express/node_modules/mkdirp/README.markdown:\n   12      \n   13      mkdirp('/tmp/foo/bar/baz', function (err) {\n   14:         if (err) console.error(err)\n   15:         else console.log('pow!')\n   16      });\n   17  \n\n/home/andre/Projects/got/node_modules/express/node_modules/mkdirp/examples/pow.js:\n    2  \n    3  mkdirp('/tmp/foo/bar/baz', function (err) {\n    4:     if (err) console.error(err)\n    5:     else console.log('pow!')\n    6  });\n    7  \n\n/home/andre/Projects/got/node_modules/express/node_modules/mkdirp/examples/pow.js.orig:\n    2  \n    3  mkdirp('/tmp/foo/bar/baz', 0755, function (err) {\n    4:     if (err) console.error(err)\n    5:     else console.log('pow!')\n    6  });\n    7  \n\n/home/andre/Projects/got/node_modules/express/node_modules/mkdirp/examples/pow.js.rej:\n    7   \n    8   mkdirp('/tmp/foo/bar/baz', 0755, function (err) {\n    9:      if (err) console.error(err)\n   10:      else console.log('pow!')\n   11   });\n   12  +\n   13  +try {\n   14  +  mkdirpSync('/tmp/bar/foo/baz', 0755);\n   15: +  console.log('double pow!');\n   16  +}\n   17  +catch (ex) {\n   18: +  console.log(ex);\n   19  +}\n\n/home/andre/Projects/got/node_modules/express/node_modules/mkdirp/test/clobber.js:\n   18  \n   19  test('clobber-pre', function (t) {\n   20:     console.error(\"about to write to \"+itw)\n   21      fs.writeFileSync(itw, 'I AM IN THE WAY, THE TRUTH, AND THE LIGHT.');\n   22  \n\n/home/andre/Projects/got/node_modules/express/node_modules/qs/benchmark.js:\n    6    , n = times;\n    7  \n    8: console.log('times: %d', times);\n    9  \n   10  while (n--) qs.parse('foo=bar');\n   11: console.log('simple: %dms', new Date - start);\n   12  \n   13  var start = new Date\n   ..\n   15  \n   16  while (n--) qs.parse('user[name][first]=tj&user[name][last]=holowaychuk');\n   17: console.log('nested: %dms', new Date - start);\n\n/home/andre/Projects/got/node_modules/express/node_modules/qs/examples.js:\n    7  \n    8  var obj = qs.parse('foo');\n    9: console.log(obj)\n   10  \n   11  var obj = qs.parse('foo=bar=baz');\n   12: console.log(obj)\n   13  \n   14  var obj = qs.parse('users[]');\n   15: console.log(obj)\n   16  \n   17  var obj = qs.parse('name=tj&email=tj@vision-media.ca');\n   18: console.log(obj)\n   19  \n   20  var obj = qs.parse('users[]=tj&users[]=tobi&users[]=jane');\n   21: console.log(obj)\n   22  \n   23  var obj = qs.parse('user[name][first]=tj&user[name][last]=holowaychuk');\n   24: console.log(obj)\n   25  \n   26  var obj = qs.parse('users[][name][first]=tj&users[][name][last]=holowaychuk');\n   27: console.log(obj)\n   28  \n   29  var obj = qs.parse('a=a&a=b&a=c');\n   30: console.log(obj)\n   31  \n   32  var obj = qs.parse('user[tj]=tj&user[tj]=TJ');\n   33: console.log(obj)\n   34  \n   35  var obj = qs.parse('user[names]=tj&user[names]=TJ&user[names]=Tyler');\n   36: console.log(obj)\n   37  \n   38  var obj = qs.parse('user[name][first]=tj&user[name][first]=TJ');\n   39: console.log(obj)\n   40  \n   41  var obj = qs.parse('user[0]=tj&user[1]=TJ');\n   42: console.log(obj)\n   43  \n   44  var obj = qs.parse('user[0]=tj&user[]=TJ');\n   45: console.log(obj)\n   46  \n   47  var obj = qs.parse('user[0]=tj&user[foo]=TJ');\n   48: console.log(obj)\n   49  \n   50  var str = qs.stringify({ user: { name: 'Tobi', email: 'tobi@learnboost.com' }});\n   51: console.log(str);\n\n/home/andre/Projects/got/node_modules/express/testing/index.js:\n   22  //     debugger\n   23  //     res.write('first');\n   24: //     console.error('first');\n   25  //     next();\n   26  //   });\n   ..\n   29  // \n   30  //   app.use(function(req, res, next){\n   31: //     console.error('last');\n   32  //     res.end('last');\n   33  //   });\n   ..\n   35  // \n   36  // app.get('/', function(req, res, next){\n   37: //   console.error('middle');\n   38  //   res.write(' route ');\n   39  //   next();\n   ..\n   41  \n   42  app.listen(3000);\n   43: console.log('listening on port 3000');\n\n/home/andre/Projects/got/node_modules/express/testing/foo/app.js:\n   33  \n   34  app.listen(3000);\n   35: console.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\n   36  \n\n/home/andre/Projects/got/node_modules/jade/jade.js:\n  865      // Debug compiler\n  866      if (options.debug) {\n  867:       console.error('\\nCompiled Function:\\n\\n\\033[90m%s\\033[0m', js.replace(/^/gm, '  '));\n  868      }\n  869  \n\n/home/andre/Projects/got/node_modules/jade/bin/jade:\n   32  \n   33  program.on('--help', function(){\n   34:   console.log('  Examples:');\n   35:   console.log('');\n   36:   console.log('    # translate jade the templates dir');\n   37:   console.log('    $ jade templates');\n   38:   console.log('');\n   39:   console.log('    # create {foo,bar}.html');\n   40:   console.log('    $ jade {foo,bar}.jade');\n   41:   console.log('');\n   42:   console.log('    # jade over stdio');\n   43:   console.log('    $ jade < my.jade > my.html');\n   44:   console.log('');\n   45:   console.log('    # jade over stdio');\n   46:   console.log('    $ echo \"h1 Jade!\" | jade');\n   47:   console.log('');\n   48:   console.log('    # foo, bar dirs rendering to /tmp');\n   49:   console.log('    $ jade foo bar --out /tmp ');\n   50:   console.log('');\n   51  });\n   52  \n   ..\n   80  \n   81  if (files.length) {\n   82:   console.log();\n   83    files.forEach(renderFile);\n   84:   process.on('exit', console.log);\n   85  // stdio\n   86  } else {\n   ..\n  131            fs.writeFile(path, output, function(err){\n  132              if (err) throw err;\n  133:             console.log('  \\033[90mrendered \\033[36m%s\\033[0m', path);\n  134            });\n  135          });\n\n/home/andre/Projects/got/node_modules/jade/lib/jade.js:\n  103      // Debug compiler\n  104      if (options.debug) {\n  105:       console.error('\\nCompiled Function:\\n\\n\\033[90m%s\\033[0m', js.replace(/^/gm, '  '));\n  106      }\n  107  \n\n/home/andre/Projects/got/node_modules/jade/node_modules/commander/Readme.md:\n   31    .parse(process.argv);\n   32  \n   33: console.log('you ordered a pizza with:');\n   34: if (program.peppers) console.log('  - peppers');\n   35: if (program.pineapple) console.log('  - pineappe');\n   36: if (program.bbq) console.log('  - bbq');\n   37: console.log('  - %s cheese', program.cheese);\n   38  ```\n   39  \n   ..\n   81    .parse(process.argv);\n   82  \n   83: console.log(' int: %j', program.integer);\n   84: console.log(' float: %j', program.float);\n   85: console.log(' optional: %j', program.optional);\n   86  program.range = program.range || [];\n   87: console.log(' range: %j..%j', program.range[0], program.range[1]);\n   88: console.log(' list: %j', program.list);\n   89: console.log(' args: %j', program.args);\n   90  ```\n   91  \n   ..\n  122  \n  123  program.on('--help', function(){\n  124:   console.log('  Examples:');\n  125:   console.log('');\n  126:   console.log('    $ custom-help --help');\n  127:   console.log('    $ custom-help -h');\n  128:   console.log('');\n  129  });\n  130  \n  131  program.parse(process.argv);\n  132  \n  133: console.log('stuff');\n  134  ```\n  135  \n  ...\n  161  ```js\n  162  program.prompt('name: ', function(name){\n  163:   console.log('hi %s', name);\n  164  });\n  165  ```\n  ...\n  169  ```js\n  170  program.prompt('description:', function(name){\n  171:   console.log('hi %s', name);\n  172  });\n  173  ```\n  ...\n  177  ```js\n  178  program.prompt('Age: ', Number, function(age){\n  179:   console.log('age: %j', age);\n  180  });\n  181  ```\n  ...\n  183  ```js\n  184  program.prompt('Birthdate: ', Date, function(date){\n  185:   console.log('date: %s', date);\n  186  });\n  187  ```\n  ...\n  193  ```js\n  194  program.password('Password: ', function(pass){\n  195:   console.log('got \"%s\"', pass);\n  196    process.stdin.destroy();\n  197  });\n  ...\n  202  ```js\n  203  program.password('Password: ', '*', function(pass){\n  204:   console.log('got \"%s\"', pass);\n  205    process.stdin.destroy();\n  206  });\n  ...\n  213  ```js\n  214  program.confirm('continue? ', function(ok){\n  215:   console.log(' got %j', ok);\n  216  });\n  217  ```\n  ...\n  224  var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];\n  225  \n  226: console.log('Choose the coolest pet:');\n  227  program.choose(list, function(i){\n  228:   console.log('you chose %d \"%s\"', i, list[i]);\n  229  });\n  230  ```\n\n/home/andre/Projects/got/node_modules/jade/node_modules/commander/lib/commander.js:\n  122   *        .description('run remote setup commands')\n  123   *        .action(function(){\n  124:  *          console.log('setup');\n  125   *        });\n  126   *     \n  ...\n  129   *        .description('run the given remote command')\n  130   *        .action(function(cmd){\n  131:  *          console.log('exec \"%s\"', cmd);\n  132   *        });\n  133   *     \n  ...\n  136   *        .description('deploy the given env')\n  137   *        .action(function(env){\n  138:  *          console.log('deploying \"%s\"', env);\n  139   *        });\n  140   *     \n  ...\n  518  \n  519  Command.prototype.missingArgument = function(name){\n  520:   console.error();\n  521:   console.error(\"  error: missing required argument `%s'\", name);\n  522:   console.error();\n  523    process.exit(1);\n  524  };\n  ...\n  533  \n  534  Command.prototype.optionMissingArgument = function(option, flag){\n  535:   console.error();\n  536    if (flag) {\n  537:     console.error(\"  error: option `%s' argument missing, got `%s'\", option.flags, flag);\n  538    } else {\n  539:     console.error(\"  error: option `%s' argument missing\", option.flags);\n  540    }\n  541:   console.error();\n  542    process.exit(1);\n  543  };\n  ...\n  551  \n  552  Command.prototype.unknownOption = function(flag){\n  553:   console.error();\n  554:   console.error(\"  error: unknown option `%s'\", flag);\n  555:   console.error();\n  556    process.exit(1);\n  557  };\n  ...\n  575    this.option(flags, 'output the version number');\n  576    this.on('version', function(){\n  577:     console.log(str);\n  578      process.exit(0);\n  579    });\n  ...\n  768  Command.prototype.promptMultiLine = function(str, fn){\n  769    var buf = [];\n  770:   console.log(str);\n  771    process.stdin.setEncoding('utf8');\n  772    process.stdin.on('data', function(val){\n  ...\n  792   *\n  793   *     program.prompt('Username: ', function(name){\n  794:  *       console.log('hi %s', name);\n  795   *     });\n  796   *     \n  797   *     program.prompt('Description:', function(desc){\n  798:  *       console.log('description was \"%s\"', desc.trim());\n  799   *     });\n  800   *\n  ...\n  818   *\n  819   *     program.password('Password: ', function(pass){\n  820:  *       console.log('got \"%s\"', pass);\n  821   *       process.stdin.destroy();\n  822   *     });\n  823   *\n  824   *     program.password('Password: ', '*', function(pass){\n  825:  *       console.log('got \"%s\"', pass);\n  826   *       process.stdin.destroy();\n  827   *     });\n  ...\n  850    process.stdin.on('keypress', function(c, key){\n  851      if (key && 'enter' == key.name) {\n  852:       console.log();\n  853        process.stdin.removeAllListeners('keypress');\n  854        tty.setRawMode(false);\n  ...\n  859  \n  860      if (key && key.ctrl && 'c' == key.name) {\n  861:       console.log('%s', buf);\n  862        process.exit();\n  863      }\n  ...\n  874   *\n  875   *      program.confirm('continue? ', function(ok){\n  876:  *        console.log(' got %j', ok);\n  877   *        process.stdin.destroy();\n  878   *      });\n  ...\n  901   *      var list = ['tobi', 'loki', 'jane', 'manny', 'luna'];\n  902   *      \n  903:  *      console.log('Choose the coolest pet:');\n  904   *      program.choose(list, function(i){\n  905:  *        console.log('you chose %d \"%s\"', i, list[i]);\n  906   *        process.stdin.destroy();\n  907   *      });\n  ...\n  916  \n  917    list.forEach(function(item, i){\n  918:     console.log('  %d) %s', i + 1, item);\n  919    });\n  920  \n\n/home/andre/Projects/got/node_modules/jade/node_modules/mkdirp/README.markdown:\n   12      \n   13      mkdirp('/tmp/foo/bar/baz', function (err) {\n   14:         if (err) console.error(err)\n   15:         else console.log('pow!')\n   16      });\n   17  \n\n/home/andre/Projects/got/node_modules/jade/node_modules/mkdirp/examples/pow.js:\n    2  \n    3  mkdirp('/tmp/foo/bar/baz', function (err) {\n    4:     if (err) console.error(err)\n    5:     else console.log('pow!')\n    6  });\n    7  \n\n/home/andre/Projects/got/node_modules/jade/node_modules/mkdirp/examples/pow.js.orig:\n    2  \n    3  mkdirp('/tmp/foo/bar/baz', 0755, function (err) {\n    4:     if (err) console.error(err)\n    5:     else console.log('pow!')\n    6  });\n    7  \n\n/home/andre/Projects/got/node_modules/jade/node_modules/mkdirp/examples/pow.js.rej:\n    7   \n    8   mkdirp('/tmp/foo/bar/baz', 0755, function (err) {\n    9:      if (err) console.error(err)\n   10:      else console.log('pow!')\n   11   });\n   12  +\n   13  +try {\n   14  +  mkdirpSync('/tmp/bar/foo/baz', 0755);\n   15: +  console.log('double pow!');\n   16  +}\n   17  +catch (ex) {\n   18: +  console.log(ex);\n   19  +}\n\n/home/andre/Projects/got/node_modules/jade/node_modules/mkdirp/test/clobber.js:\n   18  \n   19  test('clobber-pre', function (t) {\n   20:     console.error(\"about to write to \"+itw)\n   21      fs.writeFileSync(itw, 'I AM IN THE WAY, THE TRUTH, AND THE LIGHT.');\n   22  \n\n/home/andre/Projects/got/node_modules/jade/testing/index.js:\n    8  jade.renderFile('testing/index.jade', { pretty: true, debug: true, compileDebug: false }, function(err, str){\n    9    if (err) throw err;\n   10:   console.log(str);\n   11  });\n\n/home/andre/Projects/got/node_modules/nodeunit/CONTRIBUTORS.md:\n    5  \n    6    * Deeper default object inspection\n    7:   * Timeout to ensure flushing of console output (default reporter)\n    8  \n    9  * **[Alex Wolfe](https://github.com/alexkwolfe)**\n\n/home/andre/Projects/got/node_modules/nodeunit/README.md:\n  322      }\n  323      catch(e) {\n  324:         console.log(\"Cannot find nodeunit module.\");\n  325:         console.log(\"You can download submodules for this project by doing:\");\n  326:         console.log(\"\");\n  327:         console.log(\"    git submodule init\");\n  328:         console.log(\"    git submodule update\");\n  329:         console.log(\"\");\n  330          process.exit();\n  331      }\n\n/home/andre/Projects/got/node_modules/nodeunit/bin/nodeunit:\n    8  //       lands in core.\n    9  //\n   10: // Until then, use console.log from npm (https://gist.github.com/1077544)\n   11: require('../deps/console.log');\n   12  \n   13  //require.paths.push(process.cwd());\n   ..\n   83              return reporter_file !== 'index';\n   84          });\n   85:         console.log('Build-in reporters: ');\n   86          reporters.forEach(function (reporter_file) {\n   87              var reporter = require('../lib/reporters/' + reporter_file);\n   88:             console.log('  * ' + reporter_file + (reporter.info ? ': ' + reporter.info : ''));\n   89          });\n   90          process.exit(0);\n   ..\n   92          var content = fs.readFileSync(__dirname + '/../package.json', 'utf8');\n   93          var pkg = JSON.parse(content);\n   94:         console.log(pkg.version);\n   95          process.exit(0);\n   96      } else if ((arg === '-h') || (arg === '--help')) {\n   97:         console.log(usage);\n   98          process.exit(0);\n   99      } else {\n  ...\n  103  \n  104  if (files.length === 0) {\n  105:     console.log('Files required.');\n  106:     console.log(usage);\n  107      process.exit(1);\n  108  }\n\n/home/andre/Projects/got/node_modules/nodeunit/deps/async.js:\n    1: /*global setTimeout: false, console: false */\n    2  (function () {\n    3  \n    .\n  574      };\n  575  \n  576:     var _console_fn = function (name) {\n  577          return function (fn) {\n  578              var args = Array.prototype.slice.call(arguments, 1);\n  579              fn.apply(null, args.concat([function (err) {\n  580                  var args = Array.prototype.slice.call(arguments, 1);\n  581:                 if (typeof console !== 'undefined') {\n  582                      if (err) {\n  583:                         if (console.error) {\n  584:                             console.error(err);\n  585                          }\n  586                      }\n  587:                     else if (console[name]) {\n  588                          _forEach(args, function (x) {\n  589:                             console[name](x);\n  590                          });\n  591                      }\n  ...\n  594          };\n  595      };\n  596:     async.log = _console_fn('log');\n  597:     async.dir = _console_fn('dir');\n  598:     /*async.info = _console_fn('info');\n  599:     async.warn = _console_fn('warn');\n  600:     async.error = _console_fn('error');*/\n  601  \n  602      async.memoize = function (fn, hasher) {\n\n/home/andre/Projects/got/node_modules/nodeunit/deps/console.log.js:\n    1  /*\n    2:   A console.log that won't leave you hanging when node exits\n    3    90% of this file was ripped from node.js\n    4  \n    5:   License: see: https://github.com/joyent/node/blob/master/lib/console.js\n    6   */\n    7  \n    8:  // console object\n    9  var formatRegExp = /%[sdj]/g;\n   10  function format(f) {\n   ..\n   41  }\n   42  \n   43: console.log = function() {\n   44    var res = process.stdout.write(format.apply(this, arguments) + '\\n');\n   45  \n\n/home/andre/Projects/got/node_modules/nodeunit/deps/ejs/benchmark.js:\n    5      times = 50000;\n    6  \n    7: console.log('rendering ' + times + ' times');\n    8  \n    9  var start = new Date;\n   ..\n   12  }\n   13  \n   14: console.log('took ' + (new Date - start) + 'ms');\n\n/home/andre/Projects/got/node_modules/nodeunit/deps/ejs/ejs.js:\n  246    ].join(\"\\n\");\n  247    \n  248:   if (options.debug) console.log(str);\n  249    var fn = new Function('locals, filters, escape', str);\n  250    return function(locals){\n\n/home/andre/Projects/got/node_modules/nodeunit/deps/ejs/ejs.min.js:\n    1  // CommonJS require()\n    2: function require(p){var path=require.resolve(p),mod=require.modules[path];if(!mod)throw new Error('failed to require \"'+p+'\"');mod.exports||(mod.exports={},mod.call(mod.exports,mod,mod.exports,require.relative(path)));return mod.exports}require.modules={},require.resolve=function(path){var orig=path,reg=path+\".js\",index=path+\"/index.js\";return require.modules[reg]&&reg||require.modules[index]&&index||orig},require.register=function(path,fn){require.modules[path]=fn},require.relative=function(parent){return function(p){if(\".\"!=p[0])return require(p);var path=parent.split(\"/\"),segs=p.split(\"/\");path.pop();for(var i=0;i<segs.length;i++){var seg=segs[i];\"..\"==seg?path.pop():\".\"!=seg&&path.push(seg)}return require(path.join(\"/\"))}},require.register(\"ejs.js\",function(module,exports,require){var utils=require(\"./utils\");exports.version=\"0.4.2\";var filters=exports.filters=require(\"./filters\"),cache={};exports.clearCache=function(){cache={}};function filtered(js){return js.substr(1).split(\"|\").reduce(function(js,filter){var parts=filter.split(\":\"),name=parts.shift(),args=parts.shift()||\"\";args&&(args=\", \"+args);return\"filters.\"+name+\"(\"+js+args+\")\"})}function rethrow(err,str,filename,lineno){var lines=str.split(\"\\n\"),start=Math.max(lineno-3,0),end=Math.min(lines.length,lineno+3),context=lines.slice(start,end).map(function(line,i){var curr=i+start+1;return(curr==lineno?\" >> \":\"    \")+curr+\"| \"+line}).join(\"\\n\");err.path=filename,err.message=(filename||\"ejs\")+\":\"+lineno+\"\\n\"+context+\"\\n\\n\"+err.message;throw err}var parse=exports.parse=function(str,options){var options=options||{},open=options.open||exports.open||\"<%\",close=options.close||exports.close||\"%>\",buf=[\"var buf = [];\",\"\\nwith (locals) {\",\"\\n  buf.push('\"],lineno=1;for(var i=0,len=str.length;i<len;++i)if(str.slice(i,open.length+i)==open){i+=open.length;var prefix,postfix,line=\"__stack.lineno=\"+lineno;switch(str[i]){case\"=\":prefix=\"', escape((\"+line+\", \",postfix=\")), '\",++i;break;case\"-\":prefix=\"', (\"+line+\", \",postfix=\"), '\",++i;break;default:prefix=\"');\"+line+\";\",postfix=\"; buf.push('\"}var start=i,end=str.indexOf(close,i),js=str.substring(i,end);js[0]==\":\"&&(js=filtered(js)),buf.push(prefix,js,postfix),i+=end-start+close.length-1}else str[i]==\"\\\\\"?buf.push(\"\\\\\\\\\"):str[i]==\"'\"?buf.push(\"\\\\'\"):str[i]==\"\\r\"?buf.push(\" \"):str[i]==\"\\n\"?(buf.push(\"\\\\n\"),lineno++):buf.push(str[i]);buf.push(\"');\\n}\\nreturn buf.join('');\");return buf.join(\"\")},compile=exports.compile=function(str,options){options=options||{};var input=JSON.stringify(str),filename=options.filename?JSON.stringify(options.filename):\"undefined\";str=[\"var __stack = { lineno: 1, input: \"+input+\", filename: \"+filename+\" };\",rethrow.toString(),\"try {\",exports.parse(str,options),\"} catch (err) {\",\"  rethrow(err, __stack.input, __stack.filename, __stack.lineno);\",\"}\"].join(\"\\n\"),options.debug&&console.log(str);var fn=new Function(\"locals, filters, escape\",str);return function(locals){return fn.call(this,locals,filters,utils.escape)}};exports.render=function(str,options){var fn,options=options||{};if(options.cache)if(options.filename)fn=cache[options.filename]||(cache[options.filename]=compile(str,options));else throw new Error('\"cache\" option requires \"filename\".');else fn=compile(str,options);return fn.call(options.scope,options.locals||{})},require.extensions?require.extensions[\".ejs\"]=function(module,filename){source=require(\"fs\").readFileSync(filename,\"utf-8\"),module._compile(compile(source,{}),filename)}:require.registerExtension&&require.registerExtension(\".ejs\",function(src){return compile(src,{})})}),require.register(\"filters.js\",function(module,exports,require){exports.first=function(obj){return obj[0]},exports.last=function(obj){return obj[obj.length-1]},exports.capitalize=function(str){str=String(str);return str[0].toUpperCase()+str.substr(1,str.length)},exports.downcase=function(str){return String(str).toLowerCase()},exports.upcase=function(str){return String(str).toUpperCase()},exports.sort=function(obj){return Object.create(obj).sort()},exports.sort_by=function(obj,prop){return Object.create(obj).sort(function(a,b){a=a[prop],b=b[prop];if(a>b)return 1;if(a<b)return-1;return 0})},exports.size=exports.length=function(obj){return obj.length},exports.plus=function(a,b){return Number(a)+Number(b)},exports.minus=function(a,b){return Number(a)-Number(b)},exports.times=function(a,b){return Number(a)*Number(b)},exports.divided_by=function(a,b){return Number(a)/Number(b)},exports.join=function(obj,str){return obj.join(str||\", \")},exports.truncate=function(str,len){str=String(str);return str.substr(0,len)},exports.truncate_words=function(str,n){var str=String(str),words=str.split(/ +/);return words.slice(0,n).join(\" \")},exports.replace=function(str,pattern,substitution){return String(str).replace(pattern,substitution||\"\")},exports.prepend=function(obj,val){return Array.isArray(obj)?[val].concat(obj):val+obj},exports.append=function(obj,val){return Array.isArray(obj)?obj.concat(val):obj+val},exports.map=function(arr,prop){return arr.map(function(obj){return obj[prop]})},exports.reverse=function(obj){return Array.isArray(obj)?obj.reverse():String(obj).split(\"\").reverse().join(\"\")},exports.get=function(obj,prop){return obj[prop]},exports.json=function(obj){return JSON.stringify(obj)}}),require.register(\"utils.js\",function(module,exports,require){exports.escape=function(html){return String(html).replace(/&(?!\\w+;)/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\").replace(/\"/g,\"&quot;\")}})\n\n/home/andre/Projects/got/node_modules/nodeunit/deps/ejs/examples/list.js:\n   14  });\n   15  \n   16: console.log(ret);\n\n/home/andre/Projects/got/node_modules/nodeunit/deps/ejs/lib/ejs.js:\n  195    ].join(\"\\n\");\n  196    \n  197:   if (options.debug) console.log(str);\n  198    var fn = new Function('locals, filters, escape', str);\n  199    return function(locals){\n\n/home/andre/Projects/got/node_modules/nodeunit/deps/ejs/support/compile.js:\n   14    , files = {};\n   15  \n   16: console.log('');\n   17  \n   18  // parse arguments\n   ..\n   22    fs.readFile(file, 'utf8', function(err, js){\n   23      if (err) throw err;\n   24:     console.log('  \\033[90mcompile : \\033[0m\\033[36m%s\\033[0m', file);\n   25      files[file] = parse(js);\n   26      --pending || compile();\n   ..\n  104    fs.writeFile('ejs.js', buf, function(err){\n  105      if (err) throw err;\n  106:     console.log('  \\033[90m create : \\033[0m\\033[36m%s\\033[0m', 'ejs.js');\n  107:     console.log();\n  108    });\n  109  }\n\n/home/andre/Projects/got/node_modules/nodeunit/examples/browser/nodeunit.js:\n  497  var nodeunit = {};\n  498  var reporter = {};\n  499: /*global setTimeout: false, console: false */\n  500  (function () {\n  501  \n  ...\n 1072      };\n 1073  \n 1074:     var _console_fn = function (name) {\n 1075          return function (fn) {\n 1076              var args = Array.prototype.slice.call(arguments, 1);\n 1077              fn.apply(null, args.concat([function (err) {\n 1078                  var args = Array.prototype.slice.call(arguments, 1);\n 1079:                 if (typeof console !== 'undefined') {\n 1080                      if (err) {\n 1081:                         if (console.error) {\n 1082:                             console.error(err);\n 1083                          }\n 1084                      }\n 1085:                     else if (console[name]) {\n 1086                          _forEach(args, function (x) {\n 1087:                             console[name](x);\n 1088                          });\n 1089                      }\n ....\n 1092          };\n 1093      };\n 1094:     async.log = _console_fn('log');\n 1095:     async.dir = _console_fn('dir');\n 1096:     /*async.info = _console_fn('info');\n 1097:     async.warn = _console_fn('warn');\n 1098:     async.error = _console_fn('error');*/\n 1099  \n 1100      async.memoize = function (fn, hasher) {\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/nodeunit.js:\n   31  exports.testrunner = {\n   32      run: function () {\n   33:         console.log(\n   34              'WARNING: nodeunit.testrunner is going to be deprecated, please ' +\n   35              'use nodeunit.reporters.default instead!'\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/track.js:\n   38  exports.default_on_exit = function (tracker) {\n   39      if (tracker.unfinished()) {\n   40:         console.log('');\n   41:         console.log('Undone tests (or their setups/teardowns): ');\n   42          var names = tracker.names();\n   43          for (var i = 0; i < names.length; i += 1) {\n   44:             console.log(names[i]);\n   45          }\n   46          process.reallyExit(tracker.unfinished());\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/default.js:\n   56      var tracker = track.createTracker(function (tracker) {\n   57          if (tracker.unfinished()) {\n   58:             console.log('');\n   59:             console.log(error(bold(\n   60                  'FAILURES: Undone tests (or their setups/teardowns): '\n   61              )));\n   62              var names = tracker.names();\n   63              for (var i = 0; i < names.length; i += 1) {\n   64:                 console.log('- ' + names[i]);\n   65              }\n   66:             console.log('');\n   67:             console.log('To fix this, make sure all tests call test.done()');\n   68              process.reallyExit(tracker.unfinished());\n   69          }\n   ..\n   74  	    testFullSpec: options.testFullSpec,\n   75          moduleStart: function (name) {\n   76:             console.log('\\n' + bold(name));\n   77          },\n   78          testDone: function (name, assertions) {\n   ..\n   80  \n   81              if (!assertions.failures()) {\n   82:                 console.log('✔ ' + name);\n   83              }\n   84              else {\n   85:                 console.log(error('✖ ' + name) + '\\n');\n   86                  assertions.forEach(function (a) {\n   87                      if (a.failed()) {\n   88                          a = utils.betterErrors(a);\n   89                          if (a.error instanceof AssertionError && a.message) {\n   90:                             console.log(\n   91                                  'Assertion Message: ' +\n   92                                  assertion_message(a.message)\n   93                              );\n   94                          }\n   95:                         console.log(a.error.stack + '\\n');\n   96                      }\n   97                  });\n   ..\n  102              var duration = end - start;\n  103              if (assertions.failures()) {\n  104:                 console.log(\n  105                      '\\n' + bold(error('FAILURES: ')) + assertions.failures() +\n  106                      '/' + assertions.length + ' assertions failed (' +\n  ...\n  109              }\n  110              else {\n  111:                 console.log(\n  112                     '\\n' + bold(ok('OK: ')) + assertions.length +\n  113                     ' assertions (' + assertions.duration + 'ms)'\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/eclipse.js:\n   41      var tracker = track.createTracker(function (tracker) {\n   42          if (tracker.unfinished()) {\n   43:             console.log('');\n   44:             console.log('FAILURES: Undone tests (or their setups/teardowns): ');\n   45              var names = tracker.names();\n   46              for (var i = 0; i < names.length; i += 1) {\n   47:                 console.log('- ' + names[i]);\n   48              }\n   49:             console.log('');\n   50:             console.log('To fix this, make sure all tests call test.done()');\n   51              process.reallyExit(tracker.unfinished());\n   52          }\n   ..\n   56          testspec: undefined,\n   57          moduleStart: function (name) {\n   58:             console.log('\\n' + name);\n   59          },\n   60          testDone: function (name, assertions) {\n   ..\n   62  \n   63              if (!assertions.failures()) {\n   64:                 console.log('✔ ' + name);\n   65              }\n   66              else {\n   67:                 console.log('✖ ' + name + '\\n');\n   68                  assertions.forEach(function (a) {\n   69                      if (a.failed()) {\n   70                          a = utils.betterErrors(a);\n   71                          if (a.error instanceof AssertionError && a.message) {\n   72:                             console.log(\n   73                                  'Assertion Message: ' + a.message\n   74                              );\n   75                          }\n   76:                         console.log(a.error.stack + '\\n');\n   77                      }\n   78                  });\n   ..\n   83              var duration = end - start;\n   84              if (assertions.failures()) {\n   85:                 console.log(\n   86                      '\\n' + 'FAILURES: ' + assertions.failures() +\n   87                      '/' + assertions.length + ' assertions failed (' +\n   ..\n   90              }\n   91              else {\n   92:                 console.log(\n   93                     '\\n' + 'OK: ' + assertions.length +\n   94                     ' assertions (' + assertions.duration + 'ms)'\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/html.js:\n   35      });\n   36  \n   37:     console.log('<html>');\n   38:     console.log('<head>');\n   39:     console.log('<title></title>');\n   40:     console.log('<style type=\"text/css\">');\n   41:     console.log('body { font: 12px Helvetica Neue }');\n   42:     console.log('h2 { margin:0 ; padding:0 }');\n   43:     console.log('pre { font: 11px Andale Mono; margin-left: 1em; padding-left: 1em; margin-top:0; font-size:smaller;}');\n   44:     console.log('.assertion_message { margin-left: 1em; }');\n   45:     console.log('  ol {' +\n   46      '	list-style: none;' +\n   47      '	margin-left: 1em;' +\n   ..\n   49      '	text-indent: -1em;' +\n   50      '}');\n   51:     console.log('  ol li.pass:before { content: \"\\\\2714 \\\\0020\"; }');\n   52:     console.log('  ol li.fail:before { content: \"\\\\2716 \\\\0020\"; }');\n   53:     console.log('</style>');\n   54:     console.log('</head>');\n   55:     console.log('<body>');\n   56      nodeunit.runFiles(paths, {\n   57          testspec: options.testspec,\n   58          testFullSpec: options.testFullSpec,\n   59          moduleStart: function (name) {\n   60:             console.log('<h2>' + name + '</h2>');\n   61:             console.log('<ol>');\n   62          },\n   63          testDone: function (name, assertions) {\n   64              if (!assertions.failures()) {\n   65:                 console.log('<li class=\"pass\">' + name + '</li>');\n   66              }\n   67              else {\n   68:                 console.log('<li class=\"fail\">' + name);\n   69                  assertions.forEach(function (a) {\n   70                      if (a.failed()) {\n   71                          a = utils.betterErrors(a);\n   72                          if (a.error instanceof AssertionError && a.message) {\n   73:                             console.log('<div class=\"assertion_message\">' +\n   74                                  'Assertion Message: ' + a.message +\n   75                              '</div>');\n   76                          }\n   77:                         console.log('<pre>');\n   78:                         console.log(a.error.stack);\n   79:                         console.log('</pre>');\n   80                      }\n   81                  });\n   82:                 console.log('</li>');\n   83              }\n   84          },\n   85          moduleDone: function () {\n   86:             console.log('</ol>');\n   87          },\n   88          done: function (assertions) {\n   ..\n   90              var duration = end - start;\n   91              if (assertions.failures()) {\n   92:                 console.log(\n   93                      '<h3>FAILURES: '  + assertions.failures() +\n   94                      '/' + assertions.length + ' assertions failed (' +\n   ..\n   97              }\n   98              else {\n   99:                 console.log(\n  100                      '<h3>OK: ' + assertions.length +\n  101                      ' assertions (' + assertions.duration + 'ms)</h3>'\n  102                  );\n  103              }\n  104:             console.log('</body>');\n  105:             console.log('</html>');\n  106  \n  107              if (callback) callback(assertions.failures() ? new Error('We have got test failures.') : undefined);\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/junit.js:\n   75  exports.run = function (files, opts, callback) {\n   76      if (!opts.output) {\n   77:         console.error(\n   78              'Error: No output directory defined.\\n' +\n   79              '\\tEither add an \"output\" property to your nodeunit.json config ' +\n   ..\n  155                              module.name + '.xml'\n  156                          );\n  157:                         console.log('Writing ' + filename);\n  158                          fs.writeFileSync(filename, rendered, 'utf8');\n  159                      }\n  160                      if (assertions.failures()) {\n  161:                         console.log(\n  162                              '\\n' + bold(error('FAILURES: ')) +\n  163                              assertions.failures() + '/' +\n  ...\n  167                      }\n  168                      else {\n  169:                         console.log(\n  170                              '\\n' + bold(ok('OK: ')) + assertions.length +\n  171                              ' assertions (' + assertions.duration + 'ms)'\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/machineout.js:\n   74              var names = tracker.names();\n   75              for (var i = 0; i < names.length; i += 1) {\n   76:                 console.log(createErrorMessage(\n   77                      'Error', names[i], \n   78                      '', '', '', \n   ..\n   95                      if (a.failed()) {\n   96                          stackinfo = parseStack(a.error.stack, ':');\n   97:                         console.log(createErrorMessage(\n   98                              'Fail', name, stackinfo.filename,\n   99                              stackinfo.row, stackinfo.column, stackinfo.message));\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/minimal.js:\n   60          },\n   61          moduleDone: function (name, assertions) {\n   62:             console.log('');\n   63              if (assertions.failures()) {\n   64                  assertions.forEach(function (a) {\n   ..\n   66                          a = utils.betterErrors(a);\n   67                          if (a.error instanceof AssertionError && a.message) {\n   68:                             console.log(\n   69                                  'Assertion in test ' + bold(a.testname) + ': ' +\n   70                                  magenta(a.message)\n   71                              );\n   72                          }\n   73:                         console.log(a.error.stack + '\\n');\n   74                      }\n   75                  });\n   ..\n   94              var duration = end - start;\n   95              if (assertions.failures()) {\n   96:                 console.log(\n   97                      '\\n' + bold(red('FAILURES: ')) + assertions.failures() +\n   98                      '/' + assertions.length + ' assertions failed (' +\n   ..\n  101              }\n  102              else {\n  103:                 console.log(\n  104                      '\\n' + bold(green('OK: ')) + assertions.length +\n  105                      ' assertions (' + assertions.duration + 'ms)'\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/nested.js:\n   63          var i, names;\n   64          if (tracker.unfinished()) {\n   65:             console.log('');\n   66:             console.log(error(bold(\n   67                  'FAILURES: Undone tests (or their setups/teardowns): '\n   68              )));\n   69              names = tracker.names();\n   70              for (i = 0; i < names.length; i += 1) {\n   71:                 console.log('- ' + names[i]);\n   72              }\n   73:             console.log('');\n   74:             console.log('To fix this, make sure all tests call test.done()');\n   75              process.reallyExit(tracker.unfinished());\n   76          }\n   ..\n  136  \n  137      /**\n  138:      * Prints (console.log) the nested test status line(s).\n  139       *\n  140       * @param {Array} name_arr - Array of name elements.\n  ...\n  162              }\n  163          }\n  164:         console.log(txt);\n  165      };\n  166  \n  ...\n  169          testFullSpec: options.testFullSpec,\n  170          moduleStart: function (name) {\n  171:             console.log('\\n' + bold(name));\n  172          },\n  173          testDone: function (name, assertions) {\n  ...\n  182                          a = utils.betterErrors(a);\n  183                          if (a.error instanceof AssertionError && a.message) {\n  184:                             console.log(\n  185                                  'Assertion Message: ' +\n  186                                      assertion_message(a.message)\n  187                              );\n  188                          }\n  189:                         console.log(a.error.stack + '\\n');\n  190                      }\n  191                  });\n  ...\n  196              var duration = end - start;\n  197              if (assertions.failures()) {\n  198:                 console.log(\n  199                      '\\n' + bold(error('FAILURES: ')) + assertions.failures() +\n  200                          '/' + assertions.length + ' assertions failed (' +\n  ...\n  202                  );\n  203              } else {\n  204:                 console.log(\n  205                      '\\n' + bold(ok('OK: ')) + assertions.length +\n  206                          ' assertions (' + assertions.duration + 'ms)'\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/skip_passed.js:\n   60          testFullSpec: options.testFullSpec,\n   61          moduleStart: function (name) {\n   62:             console.log('\\n' + bold(name));\n   63          },\n   64          testDone: function (name, assertions) {\n   65              if (assertions.failures()) {\n   66:                 console.log(error('✖ ' + name) + '\\n');\n   67                  assertions.forEach(function (a) {\n   68                      if (a.failed()) {\n   69                          a = utils.betterErrors(a);\n   70                          if (a.error instanceof AssertionError && a.message) {\n   71:                             console.log(\n   72                                  'Assertion Message: ' + assertion_message(a.message)\n   73                              );\n   74                          }\n   75:                         console.log(a.error.stack + '\\n');\n   76                      }\n   77                  });\n   ..\n   80          moduleDone: function (name, assertions) {\n   81              if (!assertions.failures()) {\n   82:                 console.log('✔ all tests passed');\n   83              }\n   84              else {\n   85:                 console.log(error('✖ some tests failed'));\n   86              }\n   87          },\n   ..\n   90              var duration = end - start;\n   91              if (assertions.failures()) {\n   92:                 console.log(\n   93                      '\\n' + bold(error('FAILURES: ')) + assertions.failures() +\n   94                      '/' + assertions.length + ' assertions failed (' +\n   ..\n   97              }\n   98              else {\n   99:                 console.log(\n  100                      '\\n' + bold(ok('OK: ')) + assertions.length +\n  101                      ' assertions (' + assertions.duration + 'ms)'\n\n/home/andre/Projects/got/node_modules/nodeunit/lib/reporters/verbose.js:\n   59      var tracker = track.createTracker(function (tracker) {\n   60          if (tracker.unfinished()) {\n   61:             console.log('');\n   62:             console.log(error(bold(\n   63                  'FAILURES: Undone tests (or their setups/teardowns): '\n   64              )));\n   65              var names = tracker.names();\n   66              for (var i = 0; i < names.length; i += 1) {\n   67:                 console.log('- ' + names[i]);\n   68              }\n   69:             console.log('');\n   70:             console.log('To fix this, make sure all tests call test.done()');\n   71              process.reallyExit(tracker.unfinished());\n   72          }\n   ..\n   77          testFullSpec: options.testFullSpec,\n   78          moduleStart: function (name) {\n   79:             console.log('\\n' + bold(name));\n   80          },\n   81          testDone: function (name, assertions) {\n   ..\n   83  \n   84              if (!assertions.failures()) {\n   85:                 console.log('✔ ' + name);\n   86              }\n   87              else {\n   88:                 console.log(error('✖ ' + name));\n   89              }\n   90              // verbose so print everything\n   91              assertions.forEach(function (a) {\n   92                if (a.failed()) {\n   93:                 console.log(error('  ✖ ' + a.message));\n   94                  a = utils.betterErrors(a);\n   95:                 console.log('  ' + a.error.stack);\n   96                }\n   97                else {\n   98:                 console.log('  ✔ ' + a.message);\n   99                }\n  100              });\n  ...\n  104              var duration = end - start;\n  105              if (assertions.failures()) {\n  106:                 console.log(\n  107                      '\\n' + bold(error('FAILURES: ')) + assertions.failures() +\n  108                      '/' + assertions.length + ' assertions failed (' +\n  ...\n  111              }\n  112              else {\n  113:                 console.log(\n  114                     '\\n' + bold(ok('OK: ')) + assertions.length +\n  115                     ' assertions (' + assertions.duration + 'ms)'\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/.bin/tap:\n   51  \n   52  if (options.version) {\n   53:   console.log(require(\"../package.json\").version)\n   54    process.exit(0)\n   55  }\n   56  \n   57  if (options.help) {\n   58:   console.log(function(){/*\n   59  \n   60  Usage:\n   ..\n  100        , n = details.pass + \"/\" + details.testsTotal\n  101        , dots = new Array(Math.max(1, 60 - s.length - n.length)).join(\".\")\n  102:     console.log(\"%s %s %s\", s, dots, n)\n  103      if (details.ok) {\n  104        if (details.skip) {\n  105:         console.log(\"  skipped: %s\", details.skipTotal)\n  106        }\n  107      } else {\n  108:       // console.error(details)\n  109:       console.log(\"    Command: %s\", results.command)\n  110:       console.log(\"    \" + TapProducer.encode(details.list)\n  111                    .split(/\\n/).join(\"\\n    \"))\n  112      }\n  113    })\n  114    r.on(\"end\", function () {\n  115:     //console.log(r)\n  116      var s = \"total\"\n  117        , n = r.results.pass + \"/\" + r.results.testsTotal\n  118        , dots = new Array(60 - s.length - n.length).join(\".\")\n  119        , ok = r.results.ok ? \"ok\" : \"not ok\"\n  120:     console.log(\"%s %s %s\\n\\n%s\", s, dots, n, ok)\n  121      if (r.doCoverage) {\n  122:       console.error( \"\\nCoverage: %s\\n\"\n  123                     , path.resolve(r.coverageOutDir, \"index.html\") )\n  124      }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/bin/tap-reader.js:\n   12  process.stdin.on(\"data\", function (c) {\n   13    c = c + \"\"\n   14:   // console.error(JSON.stringify(c).substr(0, 100))\n   15    tc.write(c)\n   16  })\n   ..\n   24  \n   25  tp.on(\"data\", function (c) {\n   26:   console.error([\"output write\", c])\n   27    process.stdout.write(c)\n   28  })\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/bin/tap.js:\n   51  \n   52  if (options.version) {\n   53:   console.log(require(\"../package.json\").version)\n   54    process.exit(0)\n   55  }\n   56  \n   57  if (options.help) {\n   58:   console.log(function(){/*\n   59  \n   60  Usage:\n   ..\n  100        , n = details.pass + \"/\" + details.testsTotal\n  101        , dots = new Array(Math.max(1, 60 - s.length - n.length)).join(\".\")\n  102:     console.log(\"%s %s %s\", s, dots, n)\n  103      if (details.ok) {\n  104        if (details.skip) {\n  105:         console.log(\"  skipped: %s\", details.skipTotal)\n  106        }\n  107      } else {\n  108:       // console.error(details)\n  109:       console.log(\"    Command: %s\", results.command)\n  110:       console.log(\"    \" + TapProducer.encode(details.list)\n  111                    .split(/\\n/).join(\"\\n    \"))\n  112      }\n  113    })\n  114    r.on(\"end\", function () {\n  115:     //console.log(r)\n  116      var s = \"total\"\n  117        , n = r.results.pass + \"/\" + r.results.testsTotal\n  118        , dots = new Array(60 - s.length - n.length).join(\".\")\n  119        , ok = r.results.ok ? \"ok\" : \"not ok\"\n  120:     console.log(\"%s %s %s\\n\\n%s\", s, dots, n, ok)\n  121      if (r.doCoverage) {\n  122:       console.error( \"\\nCoverage: %s\\n\"\n  123                     , path.resolve(r.coverageOutDir, \"index.html\") )\n  124      }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-assert.js:\n   12    if (extra && extra.skip) return assert.skip(message, extra)\n   13  \n   14:   //console.error(\"assert %j\", [ok, message, extra])\n   15    //if (extra && extra.skip) return assert.skip(message, extra)\n   16:   //console.error(\"assert\", [ok, message, extra])\n   17    ok = !!ok\n   18    var res = { id : id ++, ok: ok }\n   ..\n   56    }\n   57  \n   58:   //console.error(\"assert return\", res)\n   59  \n   60    return res\n   ..\n   90  \n   91  function fail (message, extra) {\n   92:   //console.error(\"assert.fail\", [message, extra])\n   93    //if (extra && extra.skip) return assert.skip(message, extra)\n   94    return assert(false, message, extra)\n   ..\n   97  \n   98  function skip (message, extra) {\n   99:   //console.error(\"assert.skip\", message, extra)\n  100    if (!extra) extra = {}\n  101    return { id: id ++, skip: true, name: message || \"\" }\n  ...\n  287    var name = t\n  288    if (typeof name === \"function\") name = name.name || \"(anonymous ctor)\"\n  289:   //console.error(\"name=%s\", name)\n  290    message = message || \"type is \"+name\n  291    var type = typeof thing\n  292:   //console.error(\"type=%s\", type)\n  293    if (!thing && type === \"object\") type = \"null\"\n  294    if (type === \"object\" && t !== \"object\") {\n  295      if (typeof t === \"function\") {\n  296:       //console.error(\"it is a function!\")\n  297        extra = extra || {}\n  298        extra.found = Object.getPrototypeOf(thing).constructor.name\n  299        extra.wanted = name\n  300:       //console.error(thing instanceof t, name)\n  301        return assert.ok(thing instanceof t, message, extra)\n  302      }\n  303  \n  304:     //console.error(\"check prototype chain\")\n  305      // check against classnames or objects in prototype chain, as well.\n  306      // type(new Error(\"asdf\"), \"Error\")\n  ...\n  314      }\n  315    }\n  316:   //console.error(type, name, type === name)\n  317    return assert.equal(type, name, message, extra)\n  318  }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-browser-harness.js:\n   11  inherits(BrowserHarness, Harness)\n   12  function BrowserHarness (outPipe) {\n   13:   //console.error(\"calling BrowserHarness\")\n   14    if (browserHarness) return browserHarness\n   15    if (!(this instanceof BrowserHarness)) {\n   ..\n   27    var output = this.output\n   28    this.on(\"childEnd\", function (child) {\n   29:     //console.error(\"childEnd in global harness\")\n   30:     //console.error(child.results)\n   31      // write out the stuff for this child.\n   32:     //console.error(\"child.conf\", child.conf)\n   33      output.write(child.conf.name || \"(unnamed test)\")\n   34      // maybe write some other stuff about the number of tests in this\n   35      // thing, etc.  I dunno.\n   36:     //console.error(\"child results\", child.results)\n   37      this.results.list.forEach(function (res) {\n   38        //delete res.error\n   39:       //console.error(\"child resuilt\", res)\n   40        output.write(res)\n   41      })\n   42:     //console.error(\"wrote child results\")\n   43      this.results.list.length = 0\n   44    })\n   ..\n   46    var streamEnded = false\n   47    this.on(\"end\", function () {\n   48:     //console.error(\"global ending the stream\")\n   49      if (!streamEnded) {\n   50        this.results.list.forEach(function (res) {\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-consumer.js:\n   41    this._passed = []\n   42    this._failed = []\n   43:   //console.error(\"TapConsumer ctor done\")\n   44  }\n   45  \n   ..\n   57  \n   58    for (var i = 0, l = lines.length; i < l; i ++) {\n   59:     //console.error([i, lines[i]])\n   60      // see if it's indented.\n   61      var line = lines[i]\n   ..\n   68          this._indent.push(lines[c++])\n   69        }\n   70:       //console.error(c-i, \"indented\", this._indent, this._current)\n   71        i = c - 1\n   72        continue\n   ..\n  101  TapConsumer.prototype._parseLine = function (line) {\n  102    if (this.bailedOut) return\n  103:   //console.error(\"_parseLine\", [line])\n  104    // if there are any indented lines, and there is a\n  105    // current object already, then they belong to it.\n  ...\n  129    if (line.match(/^#/)) { // just a comment\n  130      line = line.replace(/^#+/, \"\").trim()\n  131:     // console.error(\"outputting comment\", [line])\n  132      if (line) this.emit(\"data\", line)\n  133      return\n  ...\n  157  \n  158    // garbage.  emit as a comment.\n  159:   //console.error(\"emitting\", [line.trim()])\n  160    if (line.trim()) this.emit(\"data\", line.trim())\n  161  }\n  ...\n  185    // split on un-escaped # characters\n  186  \n  187:   //console.log(\"# \"+JSON.stringify([name, rest]))\n  188    rest = rest.replace(/([^\\\\])((?:\\\\\\\\)*)#/g, \"$1\\n$2\").split(\"\\n\")\n  189    name = rest.shift()\n  190    rest = rest.filter(function (r) { return r.trim() }).join(\"#\")\n  191:   //console.log(\"# \"+JSON.stringify([name, rest]))\n  192  \n  193    // now, let's see if there's a directive in there.\n  ...\n  202    res.name = name\n  203  \n  204:   //console.error(line, [ok, id, name])\n  205    this._current = res\n  206  }\n  ...\n  213      , yind\n  214      , diag\n  215:   //console.error(ind, this._indent)\n  216    for (var i = 0, l = ind.length; i < l; i ++) {\n  217      var line = ind[i]\n  ...\n  222          yind = ys[1]\n  223          diag = [ys[2]]\n  224:         //console.error([line,ys, diag])\n  225          continue\n  226        } else if (lt) this.emit(\"data\", lt)\n  ...\n  233    }\n  234    if (diag) {\n  235:     //console.error('about to parse', diag)\n  236      diag = yamlish.decode(diag.join(\"\\n\"))\n  237:     //console.error('parsed', diag)\n  238      Object.keys(diag).forEach(function (k) {\n  239:       //console.error(this._current, k)\n  240        if (!this._current.hasOwnProperty(k)) this._current[k] = diag[k]\n  241      }, this)\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-global-harness.js:\n   11  inherits(GlobalHarness, Harness)\n   12  function GlobalHarness () {\n   13:   //console.error(\"calling GlobalHarness\")\n   14    if (globalHarness) return globalHarness\n   15    if (!(this instanceof GlobalHarness)) {\n   ..\n   31    var output = this.output\n   32    this.on(\"childEnd\", function (child) {\n   33:     //console.error(\"childEnd in global harness\")\n   34:     //console.error(child.results)\n   35      // write out the stuff for this child.\n   36:     //console.error(\"child.conf\", child.conf)\n   37      output.write(child.conf.name || \"(unnamed test)\")\n   38      // maybe write some other stuff about the number of tests in this\n   39      // thing, etc.  I dunno.\n   40:     //console.error(\"child results\", child.results)\n   41      this.results.list.forEach(function (res) {\n   42        //delete res.error\n   43:       //console.error(\"child resuilt\", res)\n   44        output.write(res)\n   45      })\n   46:     //console.error(\"wrote child results\")\n   47      this.results.list.length = 0\n   48    })\n   ..\n   50    var streamEnded = false\n   51    this.on(\"end\", function () {\n   52:     //console.error(\"global ending the stream\")\n   53      if (!streamEnded) {\n   54        this.results.list.forEach(function (res) {\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-harness.js:\n   19    if (!(this instanceof Harness)) return new Harness(Test)\n   20  \n   21:   //console.error(\"Test in \"+this.constructor.name, Test)\n   22  \n   23    this._Test = Test\n   ..\n   32    // emit result events on the harness.\n   33    //this.results.on(\"result\", function (res) {\n   34:   //  console.error(\"proxying result ev from res to harness\")\n   35    //  this.emit(\"result\", res)\n   36    //}.bind(this))\n   ..\n   53  // happen before it gets called.\n   54  Harness.prototype.process = function () {\n   55:   //console.error(\"harness process\")\n   56    // \"end\" can emit multiple times, so only actually move on\n   57    // to the next test if the current one is actually over.\n   ..\n   64    var skip = true\n   65    while (skip) {\n   66:     //console.error(\"checking for skips\")\n   67      var current = this._current = this._children.shift()\n   68      if (current) {\n   69        skip = current.conf.skip\n   70        if (skip) {\n   71:         //console.error(\"add a failure for the skipping\")\n   72          this.results.add(assert.fail(current.conf.name\n   73                                      ,{skip:true, diag:false}))\n   ..\n   81    }\n   82  \n   83:   //console.error(\"got current?\", !!current)\n   84    if (current) {\n   85      current.on(\"end\", this.process)\n   86      current.emit(\"ready\")\n   87:     //console.error(\"emitted ready\")\n   88:     //console.error(\"_plan\", this._plan, this.constructor.name)\n   89    } else {\n   90:     //console.error(\"Harness process: no more left.  ending\")\n   91      if (this._endNice) {\n   92        this._endNice()\n   ..\n  101      return this.process()\n  102    }\n  103:   //console.error(\"harness end\", this.constructor.name)\n  104    if (this._bailedOut) return\n  105  \n  106    // can't call .end() more than once.\n  107    if (this._ended) {\n  108:     //console.error(\"adding failure for end calling\")\n  109      this.results.add(assert.fail(\"end called more than once\"))\n  110    }\n  ...\n  119    }\n  120  \n  121:   //console.error(\"setting ended true\", this.constructor.name)\n  122    this._ended = true\n  123    this.emit(\"end\")\n  ...\n  125  \n  126  Harness.prototype.plan = function (p) {\n  127:   //console.error(\"setting plan\", new Error().stack)\n  128    if (this._plan !== null) {\n  129:     //console.error(\"about to add failure for calling plan\")\n  130      return this.results.add(assert.fail(\"plan set multiple times\"))\n  131    }\n  ...\n  137  \n  138  Harness.prototype.childEnd = function (child) {\n  139:   //console.error(\"childEnd\")\n  140    this._testCount ++\n  141    this._planSum += child._plan\n  142:   //console.error(\"adding set of child.results\")\n  143    this.results.addSet(child.results)\n  144    this.emit(\"childEnd\", child)\n  145    // was this planned?\n  146    if (this._plan === this._testCount) {\n  147:     //console.error(\"plan\", [this._plan, this._testCount])\n  148      return this.end()\n  149    }\n  ...\n  166    name = name || \"\"\n  167  \n  168:   //console.error(\"making test\", [name, conf, cb])\n  169  \n  170    // timeout: value in milliseconds. Defaults to 30s\n  ...\n  174    var self = this\n  175    if (cb) {\n  176:     //console.error(\"attaching cb to ready event\")\n  177      t.on(\"ready\", function () {\n  178        if (!isNaN(conf.timeout) && isFinite(conf.timeout)) {\n  ...\n  191      // proxy the child results to this object.\n  192      //t.on(\"result\", function (res) {\n  193:     //  console.error(\"in harness, proxying result up\")\n  194      //  t.results.add(res)\n  195      //})\n  ...\n  199  \n  200  Harness.prototype.bailout = function (message) {\n  201:   // console.error(\"Harness bailout\", this.constructor.name)\n  202    message = message || \"\"\n  203:   //console.error(\"adding bailout message result\")\n  204    this.results.add({bailout: message})\n  205:   // console.error(\">>> results after bailout\" , this.results)\n  206    this._bailedOut = true\n  207    this.emit(\"bailout\", message)\n  ...\n  210  \n  211  Harness.prototype.add = function (child) {\n  212:   //console.error(\"adding child\")\n  213    this._children.push(child)\n  214    if (!this._started) this.process()\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-producer.js:\n   28  \n   29  TapProducer.prototype.write = function (res) {\n   30:   // console.error(\"TapProducer.write\", res)\n   31    if (typeof res === \"function\") throw new Error(\"wtf?\")\n   32    if (!this.writable) this.emit(\"error\", new Error(\"not writable\"))\n   ..\n   57  TapProducer.prototype.end = function (res) {\n   58    if (res) this.write(res)\n   59:   // console.error(\"TapProducer end\", res, this.results)\n   60    this.emit(\"data\", \"\\n1..\"+this.results.testsTotal+\"\\n\")\n   61    if (this.trailer && typeof this.trailer !== \"string\") {\n   ..\n   89  \n   90  function encodeResult (res, count, diag) {\n   91:   // console.error(res, count, diag)\n   92    if (typeof res === \"string\") {\n   93      res = res.split(/\\r?\\n/).map(function (l) {\n   ..\n  125      d[k] = res[k]\n  126    })\n  127:   //console.error(d, \"about to encode\")\n  128    if (dc > 0) output += \"  ---\"+yamlish.encode(d)+\"\\n  ...\\n\"\n  129    return output\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-results.js:\n    9  \n   10  function Results (r) {\n   11:   //console.error(\"result constructor\", r)\n   12    this.ok = true\n   13    this.addSet(r)\n   ..\n   15  \n   16  Results.prototype.addSet = function (r) {\n   17:   //console.error(\"add set of results\", r)\n   18    r = r || {ok: true}\n   19    ; [ \"todo\"\n   ..\n   30      , \"testsTotal\" ].forEach(function (k) {\n   31        this[k] = (this[k] || 0) + (r[k] || 0)\n   32:       //console.error([k, this[k]])\n   33      }, this)\n   34  \n   ..\n   37    this.list = (this.list || []).concat(r.list || [])\n   38    this.emit(\"set\", this.list)\n   39:   //console.error(\"after addSet\", this)\n   40  }\n   41  \n   42  Results.prototype.add = function (r, addToList) {\n   43:   //console.error(\"add result\", r)\n   44    var pf = r.ok ? \"pass\" : \"fail\"\n   45      , PF = r.ok ? \"Pass\" : \"Fail\"\n   ..\n   60  \n   61    if (r.bailout || typeof r.bailout === \"string\") {\n   62:     // console.error(\"Bailing out in result\")\n   63      this.bailedOut = true\n   64    }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-runner.js:\n  205          tc.on(\"bailout\", function (message) {\n  206            clearTimeout(timeout)\n  207:           console.log(\"# \" + f.substr(process.cwd().length + 1))\n  208            process.stderr.write(err)\n  209            process.stdout.write(out + \"\\n\")\n  ...\n  244                // no need if stderr is set, since it will have been\n  245                // output already anyway.\n  246:               console.error(err)\n  247              }\n  248            }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/lib/tap-test.js:\n   12  \n   13  function Test (harness, name, conf) {\n   14:   //console.error(\"test ctor\")\n   15    if (!(this instanceof Test)) return new Test(harness, name, conf)\n   16  \n   ..\n   43  // this gets called if a test throws ever\n   44  Test.prototype.threw = function (ex) {\n   45:   //console.error(\"threw!\", ex.stack)\n   46    this.fail(ex.name + \": \" + ex.message, { error: ex, thrown: true })\n   47    // may emit further failing tests if the plan is not completed\n   48:   //console.error(\"end, because it threw\")\n   49    if (!this._ended) this.end()\n   50  }\n   ..\n   82  \n   83  function assertParasite (fn) { return function _testAssert () {\n   84:   //console.error(\"_testAssert\", fn.name, arguments)\n   85    if (this._bailedOut) return\n   86    var res = fn.apply(assert, arguments)\n   ..\n  104    } catch (ex) {\n  105      // any exceptions in a test are a failure\n  106:     //console.error(\"caught!\", ex.stack)\n  107      this.threw(ex)\n  108    }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/.bin/nopt:\n   22                   , 2 )\n   23  \n   24: console.log(\"parsed\", parsed)\n   25  \n   26  if (parsed.help) {\n   27:   console.log(\"\")\n   28:   console.log(\"nopt cli tester\")\n   29:   console.log(\"\")\n   30:   console.log(\"types\")\n   31:   console.log(Object.keys(types).map(function M (t) {\n   32      var type = types[t]\n   33      if (Array.isArray(type)) {\n   ..\n   39      return s\n   40    }, {}))\n   41:   console.log(\"\")\n   42:   console.log(\"shorthands\")\n   43:   console.log(shorthands)\n   44  }\n   45  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/buffer-equal/README.markdown:\n   12  var bufferEqual = require('bufferEqual');\n   13  \n   14: console.dir(bufferEqual(\n   15      new Buffer([253,254,255]),\n   16      new Buffer([253,254,255])\n   17  ));\n   18: console.dir(bufferEqual(\n   19      new Buffer('abc'),\n   20      new Buffer('abcd')\n   21  ));\n   22: console.dir(bufferEqual(\n   23      new Buffer('abc'),\n   24      'abc'\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/buffer-equal/example/eq.js:\n    1  var bufferEqual = require('../');\n    2  \n    3: console.dir(bufferEqual(\n    4      new Buffer([253,254,255]),\n    5      new Buffer([253,254,255])\n    6  ));\n    7: console.dir(bufferEqual(\n    8      new Buffer('abc'),\n    9      new Buffer('abcd')\n   10  ));\n   11: console.dir(bufferEqual(\n   12      new Buffer('abc'),\n   13      'abc'\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/deep-equal/README.markdown:\n    9  ``` js\n   10  var equal = require('deep-equal');\n   11: console.dir([\n   12      equal(\n   13          { a : [ 2, 3 ], b : [ 4 ] },\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/deep-equal/example/cmp.js:\n    1  var equal = require('../');\n    2: console.dir([\n    3      equal(\n    4          { a : [ 2, 3 ], b : [ 4 ] },\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/example/cmp_object.js:\n    4      { x : 5, a : 'abdcefg', b : [ 51, 'xxs' ] }\n    5  );\n    6: console.log(s);\n    7  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/example/diff.js:\n   13  \n   14  var s = difflet({ comment : true, indent : 2 }).compare(a, b);\n   15: console.log(s);\n   16  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/package.json:\n   18      \"cursor\",\n   19      \"color\",\n   20:     \"console\",\n   21      \"control\",\n   22      \"escape\",\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/example/cursor.js:\n    4  \n    5  charm.position(function (x, y) {\n    6:     console.dir([ x, y ]);\n    7      \n    8      charm.move(7,2);\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/charm/example/position.js:\n    4  \n    5  charm.position(function (x, y) {\n    6:     console.log('(%d, %d)', x, y);\n    7  });\n    8  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/README.markdown:\n   22  });\n   23  \n   24: console.dir(obj);\n   25  ````\n   26  \n   ..\n   49  }, []);\n   50  \n   51: console.dir(leaves);\n   52  ````\n   53  \n   ..\n   70      if (this.circular) this.remove()\n   71  });\n   72: console.dir(scrubbed);\n   73  ````\n   74  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/examples/json.js:\n   13  });\n   14  \n   15: console.dir(scrubbed);\n   16: console.dir(callbacks);\n   17  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/examples/leaves.js:\n   13  }, []);\n   14  \n   15: console.dir(leaves);\n   16  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/examples/negative.js:\n    6  });\n    7  \n    8: console.dir(obj);\n    9  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/examples/scrub.js:\n    8      if (this.circular) this.remove()\n    9  });\n   10: console.dir(scrubbed);\n   11  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/difflet/node_modules/traverse/examples/stringify.js:\n   35  });\n   36  \n   37: console.log('JSON.stringify: ' + JSON.stringify(obj));\n   38: console.log('this stringify: ' + s);\n   39  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/inherits/README.md:\n    7      }\n    8      Animal.prototype.say = function (what) {\n    9:       console.log(what)\n   10      }\n   11  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/inherits/inherits.js:\n   15  //function Child () {\n   16  //  Child.super.call(this)\n   17: //  console.error([this\n   18  //                ,this.constructor\n   19  //                ,this.constructor === Child\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/inherits/package.json:\n   20      \"url\": \"http://blog.izs.me/\"\n   21    },\n   22:   \"readme\": \"A dead simple way to do inheritance in JS.\\n\\n    var inherits = require(\\\"inherits\\\")\\n\\n    function Animal () {\\n      this.alive = true\\n    }\\n    Animal.prototype.say = function (what) {\\n      console.log(what)\\n    }\\n\\n    inherits(Dog, Animal)\\n    function Dog () {\\n      Dog.super.apply(this)\\n    }\\n    Dog.prototype.sniff = function () {\\n      this.say(\\\"sniff sniff\\\")\\n    }\\n    Dog.prototype.bark = function () {\\n      this.say(\\\"woof woof\\\")\\n    }\\n\\n    inherits(Chihuahua, Dog)\\n    function Chihuahua () {\\n      Chihuahua.super.apply(this)\\n    }\\n    Chihuahua.prototype.bark = function () {\\n      this.say(\\\"yip yip\\\")\\n    }\\n\\n    // also works\\n    function Cat () {\\n      Cat.super.apply(this)\\n    }\\n    Cat.prototype.hiss = function () {\\n      this.say(\\\"CHSKKSS!!\\\")\\n    }\\n    inherits(Cat, Animal, {\\n      meow: function () { this.say(\\\"miao miao\\\") }\\n    })\\n    Cat.prototype.purr = function () {\\n      this.say(\\\"purr purr\\\")\\n    }\\n\\n\\n    var c = new Chihuahua\\n    assert(c instanceof Chihuahua)\\n    assert(c instanceof Dog)\\n    assert(c instanceof Animal)\\n\\nThe actual function is laughably small.  10-lines small.\\n\",\n   23    \"_id\": \"inherits@1.0.0\",\n   24    \"_from\": \"inherits@*\"\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/README.markdown:\n   14      \n   15      mkdirp('/tmp/foo/bar/baz', function (err) {\n   16:         if (err) console.error(err)\n   17:         else console.log('pow!')\n   18      });\n   19  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/examples/pow.js:\n    2  \n    3  mkdirp('/tmp/foo/bar/baz', function (err) {\n    4:     if (err) console.error(err)\n    5:     else console.log('pow!')\n    6  });\n    7  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/mkdirp/test/clobber.js:\n   18  \n   19  test('clobber-pre', function (t) {\n   20:     console.error(\"about to write to \"+itw)\n   21      fs.writeFileSync(itw, 'I AM IN THE WAY, THE TRUTH, AND THE LIGHT.');\n   22  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/nopt/README.md:\n   42                   // slice defaults to 2\n   43        , parsed = nopt(knownOpts, shortHands, process.argv, 2)\n   44:     console.log(parsed)\n   45  \n   46  This would give you support for any of the following:\n   ..\n  144  the offending `nopt.invalidHandler(key, val, types)`.\n  145  \n  146: If no `nopt.invalidHandler` is assigned, then it will console.error\n  147  its whining.  If it is assigned to boolean `false` then the warning is\n  148  suppressed.\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/nopt/bin/nopt.js:\n   22                   , 2 )\n   23  \n   24: console.log(\"parsed\", parsed)\n   25  \n   26  if (parsed.help) {\n   27:   console.log(\"\")\n   28:   console.log(\"nopt cli tester\")\n   29:   console.log(\"\")\n   30:   console.log(\"types\")\n   31:   console.log(Object.keys(types).map(function M (t) {\n   32      var type = types[t]\n   33      if (Array.isArray(type)) {\n   ..\n   39      return s\n   40    }, {}))\n   41:   console.log(\"\")\n   42:   console.log(\"shorthands\")\n   43:   console.log(shorthands)\n   44  }\n   45  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/nopt/examples/my-program.js:\n   28    , parsed = nopt(knownOpts, shortHands, process.argv, 2)\n   29  \n   30: console.log(\"parsed =\\n\"+ require(\"util\").inspect(parsed))\n   31  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/nopt/lib/nopt.js:\n    2  \n    3  var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG\n    4:   ? function () { console.error.apply(console, arguments) }\n    5    : function () {}\n    6  \n    .\n  541        , parsed = actual.argv\n  542      delete actual.argv\n  543:     console.log(util.inspect(actual, false, 2, true), parsed.remain)\n  544      for (var i in opts) {\n  545        var e = JSON.stringify(opts[i])\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/nopt/node_modules/abbrev/lib/abbrev.js:\n   64  sys = require(\"util\")\n   65  \n   66: console.log(\"running tests\")\n   67  function test (list, expect) {\n   68    var actual = abbrev(list)\n   ..\n  102  })\n  103  \n  104: console.log(\"pass\")\n  105  \n  106  }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/README.markdown:\n   28  \n   29      // the percentage of lines run versus total lines in file\n   30:     console.log(stats.percentage);\n   31  \n   32      // the number of missing lines\n   33:     console.log(stats.missing);\n   34  \n   35      // the number of lines run (seen)\n   36:     console.log(stats.seen);\n   37  \n   38      // an array of line objects representing 'missed' lines\n   ..\n   41      stats.lines.forEach(function(line) {\n   42          // the line number of the line:\n   43:         console.log(line.number);\n   44  \n   45          // returns a string containing the source data for the line:\n   46:         console.log(line.source());   \n   47      }); \n   48     \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/index.js:\n   81      ctxt.__dirname = path.dirname(filename);\n   82      ctxt.process = process;\n   83:     ctxt.console = console;\n   84      ctxt.module = module;\n   85      ctxt.global = ctxt;\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/README.markdown:\n   32  Object.keys(counts).forEach(function (key) {\n   33      var count = counts[key];\n   34:     console.log(count.times + ' : ' + count.node.source());\n   35  });\n   36  ````\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/example/prof.js:\n   45  Object.keys(counts).forEach(function (key) {\n   46      var count = counts[key];\n   47:     console.log(\n   48          [ count.times, count.node.source(), count.elapsed ]\n   49              .join(' : ')\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/example/tiny.js:\n   15  Object.keys(counts).forEach(function (key) {\n   16      var count = counts[key];\n   17:     console.log(count.times + ' : ' + count.node.source());\n   18  });\n   19  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/example/top/run.js:\n   23              .forEach(function (key) {\n   24                  var count = counts[key];\n   25:                 console.log(\n   26                      count.times + ' : ' + count.node.source()\n   27                  );\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/README.markdown:\n   26  });\n   27  \n   28: console.log(res); // sin(pi / 2) == 1\n   29  ````\n   30  \n   ..\n   45  });\n   46  \n   47: console.log(src);\n   48  ````\n   49  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/example/microwave.js:\n    2  \n    3  var res = burrito.microwave('Math.sin(2)', function (node) {\n    4:     console.dir(node);\n    5      if (node.name === 'num') node.wrap('Math.PI / %s');\n    6  });\n    7  \n    8: console.log(res); // sin(pi / 2) == 1\n    9  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/example/wrap.js:\n    5  });\n    6  \n    7: console.log(src);\n    8  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/example/web/server.js:\n   10  \n   11  app.listen(8081);\n   12: console.log('Listening on :8081');\n   13  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/README.markdown:\n   20  });\n   21  \n   22: console.dir(obj);\n   23  ````\n   24  \n   ..\n   47  }, []);\n   48  \n   49: console.dir(leaves);\n   50  ````\n   51  \n   ..\n   68      if (this.circular) this.remove()\n   69  });\n   70: console.dir(scrubbed);\n   71  ````\n   72  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/main.js:\n    8      if (this.circular) this.remove()\n    9  });\n   10: console.dir(scrubbed);\n   11  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/examples/json.js:\n   13  });\n   14  \n   15: console.dir(scrubbed);\n   16: console.dir(callbacks);\n   17  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/examples/leaves.js:\n   13  }, []);\n   14  \n   15: console.dir(leaves);\n   16  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/examples/negative.js:\n    6  });\n    7  \n    8: console.dir(obj);\n    9  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/examples/scrub.js:\n    8      if (this.circular) this.remove()\n    9  });\n   10: console.dir(scrubbed);\n   11  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/traverse/examples/stringify.js:\n   35  });\n   36  \n   37: console.log('JSON.stringify: ' + JSON.stringify(obj));\n   38: console.log('this stringify: ' + s);\n   39  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/README.html:\n   40    .code-highlighted {background-color:#ffff00;}\n   41    .org-info-js_info-navigation { border-style:none; }\n   42:   #org-info-js_console-label { font-size:10px; font-weight:bold;\n   43                                 white-space:nowrap; }\n   44    .org-info-js_search-highlight {background-color:#ffff00; color:#000000;\n   ..\n  813  <span style=\"color: #0000ff;\">CLAUSE2</span>: <span style=\"color: #a020f0;\">function</span> init() {\n  814      <span style=\"color: #a020f0;\">if</span> (DEVMODE) {\n  815:         console.log(<span style=\"color: #bc8f8f;\">\"init() called\"</span>);\n  816      }\n  817      ....\n  818:     DEVMODE &amp;amp;&amp;amp; console.log(<span style=\"color: #bc8f8f;\">\"init() complete\"</span>);\n  819  }\n  820  \n  ...\n  833  variable <code>DEVMODE</code> will be assigned the value <b>true</b> (see <code>CLAUSE1</code>)\n  834  and so the <code>init()</code> function (<code>CLAUSE2</code>) will write messages to the\n  835: console log when executed, but in <code>CLAUSE3</code> a locally declared\n  836  variable will mask access to the <code>DEVMODE</code> global symbol.\n  837  </p>\n  ...\n  849  otherwise slightly problematical statement <code>false = true;</code> which it\n  850  will have formed by replacing <code>DEVMODE</code> in the body).  Similarly,\n  851: within <code>CLAUSE2</code> both calls to <code>console.log()</code> will be removed\n  852  altogether.\n  853  </p>\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/README.org:\n  447  CLAUSE2: function init() {\n  448      if (DEVMODE) {\n  449:         console.log(\"init() called\");\n  450      }\n  451      ....\n  452:     DEVMODE &amp;&amp; console.log(\"init() complete\");\n  453  }\n  454  \n  ...\n  464  variable =DEVMODE= will be assigned the value *true* (see =CLAUSE1=)\n  465  and so the =init()= function (=CLAUSE2=) will write messages to the\n  466: console log when executed, but in =CLAUSE3= a locally declared\n  467  variable will mask access to the =DEVMODE= global symbol.\n  468  \n  ...\n  478  otherwise slightly problematical statement =false = true;= which it\n  479  will have formed by replacing =DEVMODE= in the body).  Similarly,\n  480: within =CLAUSE2= both calls to =console.log()= will be removed\n  481  altogether.\n  482  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/docstyle.css:\n   28  .code-highlighted {background-color:#ffff00;}\n   29  .org-info-js_info-navigation { border-style:none; }\n   30: #org-info-js_console-label { font-size:10px; font-weight:bold;\n   31    white-space:nowrap; }\n   32  .org-info-js_search-highlight {background-color:#ffff00; color:#000000;\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/test/unit/compress/expected/issue25.js:\n    1: label1:{label2:break label2;console.log(1)}\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/test/unit/compress/test/issue25.js:\n    2      label2 : {\n    3          break label2;\n    4:         console.log(2);\n    5      }\n    6:     console.log(1);\n    7  }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/tmp/hoist.js:\n    9          }\n   10          for (var arg1 = 0, d = 20; arg1 < 10; ++arg1)\n   11:                 console.log(arg3);\n   12          for (var i in mak) {}\n   13          for (j in d) {}\n   ..\n   21  \n   22          (function moo(first, second){\n   23:                 console.log(first);\n   24          })(1);\n   25  \n   26          (function moo(first, second){\n   27:                 console.log(moo());\n   28          })(1);\n   29  }\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/tmp/instrument.js:\n   63  \n   64  var code = instrument(test.toString());\n   65: console.log(code);\n   66  \n   67  function test() {\n   ..\n   85          // for/for in\n   86          for (var i = 0; i < 5; ++i) {\n   87:                 console.log(\"Hello \" + i);\n   88          }\n   89          for (var i in [ 1, 2, 3]) {\n   90:                 console.log(i);\n   91          }\n   92  \n   ..\n   94          // should add the block brackets in this case...\n   95          for (var i = 0; i < 5; ++i)\n   96:                 console.log(\"foo\");\n   97  }\n   98  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/tmp/instrument2.js:\n   95  \n   96  var code = instrument(test.toString());\n   97: console.log(code);\n   98  \n   99  function test() {\n  ...\n  117          // for/for in\n  118          for (var i = 0; i < 5; ++i) {\n  119:                 console.log(\"Hello \" + i);\n  120          }\n  121          for (var i in [ 1, 2, 3]) {\n  122:                 console.log(i);\n  123          }\n  124  \n  125          for (var i = 0; i < 5; ++i)\n  126:                 console.log(\"foo\");\n  127  \n  128          for (var i = 0; i < 5; ++i) {\n  129:                 console.log(\"foo\");\n  130          }\n  131  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/runforcover/node_modules/bunker/node_modules/burrito/node_modules/uglify-js/tmp/test.js:\n   16          \"function\": function() {\n   17                  var node = w.dive(this); // walk depth first\n   18:                 console.log(pro.gen_code(node, { beautify: true }));\n   19                  return node;\n   20          },\n   ..\n   26  });\n   27  \n   28: console.log(pro.gen_code(ast, {\n   29          beautify: true\n   30  }));\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/node_modules/yamlish/yamlish.js:\n   91              return (k.match(/^[a-zA-Z0-9_]+$/) ? k : JSON.stringify(k)) + \": \"\n   92            })\n   93:       //console.error(keys, niceKeys, obj)\n   94        var maxLength = Math.max.apply(Math, niceKeys.map(function (k) {\n   95              return k.length\n   96            }).concat(0))\n   97:       //console.error(niceKeys, maxLength)\n   98  \n   99        var spaces = new Array(maxLength + 1).join(\" \")\n  ...\n  242  \n  243  Date.prototype.toJSON = function (k, val) {\n  244:   console.error(k, val, this)\n  245    return this.toISOString() + \" (it's a date)\"\n  246  }\n  ...\n  250    , encDec = encode(dec)\n  251  \n  252: console.error(JSON.stringify({ obj : obj\n  253                               , enc : enc.split(/\\n/)\n  254                               , dec : dec }, null, 2), encDec === enc)\n  ...\n  257    , encNum = encode(num)\n  258    , decEncNum = decode(encNum)\n  259: console.error([num, encNum, decEncNum])\n  260  }\n  261  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/test/common.js:\n   28  \n   29  if (require.main === module) {\n   30:   console.log(\"1..1\")\n   31:   console.log(\"ok 1 - just setup, nothing relevant\")\n   32  }\n   33  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/test/expose-gc-test.js:\n    3    , cp = require(\"child_process\")\n    4  \n    5: fs.writeFileSync(\"gc-script.js\", \"console.log(!!global.gc)\", \"utf8\")\n    6  \n    7  tap.test(\"gc test when the gc isn't there\", function (t) {\n    8:   console.error(\"gc test\")\n    9    t.plan(1)\n   10:   console.error(\"t.plan=\"+t._plan)\n   11  \n   12    cp.exec(\"../bin/tap.js ./gc-script\", function (err, stdo, stde) {\n   13:     console.error(\"assert gc does not exist\")\n   14      t.ok(\"false\", stdo)\n   15    })\n   ..\n   17  \n   18  tap.test(\"gc test when the gc should be there\", function (t) {\n   19:   console.error(\"gc test\")\n   20    t.plan(2)\n   21:   console.error(\"t.plan=\"+t._plan)\n   22  \n   23    t.test(\"test for gc using --gc\", function (t) {\n   24:     console.error(\"gc test using --gc\")\n   25      t.plan(1)\n   26:     console.error(\"t.plan=\"+t._plan)\n   27  \n   28      cp.exec(\"../bin/tap.js --gc ./gc-script\", function (err, stdo, stde) {\n   29:       console.error(\"assert gc exists\")\n   30        t.ok(\"true\", stdo)\n   31      })\n   ..\n   33  \n   34    t.test(\"test for gc using --expose-gc\", function (t) {\n   35:     console.error(\"gc test using --expose-gc\")\n   36      t.plan(1)\n   37:     console.error(\"t.plan=\"+t._plan)\n   38  \n   39      cp.exec(\"../bin/tap.js --expose-gc ./gc-script\", function (err, stdo) {\n   40:       console.error(\"assert gc exists\")\n   41        t.ok(\"true\", stdo)\n   42      })\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/test/non-tap-output.js:\n    1: console.log(\"everything is fine\\n\"\n    2             +\"there are no errors\\n\"\n    3             +\"this output is not haiku.\\n\\n\"\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/test/result-trap.js:\n    3  tap.test(\"trap result #TODO\", function (t0) {\n    4  \n    5:   console.log(\"not ok 1 result event trapping #TODO\")\n    6    return t0.end()\n    7  \n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/test/timeout.js:\n    2  \n    3  tap.test(\"timeout test with plan only\", function (t) {\n    4:   console.error(\"timeout test\")\n    5    t.plan(2)\n    6:   console.error(\"t.plan=\"+t._plan)\n    7    setTimeout(function () {\n    8:     console.error(\"a assert\")\n    9      t.ok(true, \"a\")\n   10    }, 1000)\n   11    setTimeout(function () {\n   12:     console.error(\"b assert\")\n   13      t.ok(true, \"b\")\n   14    }, 1000)\n   ..\n   16  \n   17  tap.test(\"timeout test with plan and end\", function (t) {\n   18:   console.error(\"timeout test\")\n   19    t.plan(2)\n   20  \n   21    var tc = 2\n   22:   console.error(\"t.plan=\"+t._plan)\n   23    setTimeout(function () {\n   24:     console.error(\"a assert\")\n   25      t.ok(true, \"a\")\n   26      if (-- tc === 0) t.end()\n   27    }, 1000)\n   28    setTimeout(function () {\n   29:     console.error(\"b assert\")\n   30      t.ok(true, \"b\")\n   31      if (-- tc === 0) t.end()\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/test/end-exception/t.js:\n    5  \n    6    t.on('end', function () {\n    7:     console.log('end()')\n    8      throw new Error('beep')\n    9    })\n\n/home/andre/Projects/got/node_modules/nodeunit/node_modules/tap/test-disabled/bailout.js:\n    5  \n    6    // t.once(\"bailout\", function () {\n    7:   //   console.error(\"bailout event\")//, t)\n    8    //   t.clear()\n    9    // })\n   10  \n   11    // t.once(\"end\", function () {\n   12:   //   console.error(\"end event\")\n   13    // })\n   14  \n   ..\n   20  \n   21    t.test(\"bailout\", function (t) {\n   22:     console.error(\"bailout test\")\n   23      t.pass(\"pass\")\n   24      t.bailout(\"bail out message\")\n\n/home/andre/Projects/got/routes/api.js:\n    1: console.log(\"included api\")\n    2  \n    3  module.exports = function(app) {\n\n/home/andre/Projects/got/routes/index.js:\n    1: console.log(\"included index\");\n    2  \n    3  module.exports = function(app) {\n\n/home/andre/Projects/got/routes/web.js:\n    1: console.log(\"included web\");\n    2  \n    3  module.exports = function(app) {\n\n/home/andre/Projects/got/tests/map_test.js:\n   25  \n   26  exports['harbourliness'] = function(test) {\n   27:   console.log(Game)\n   28    var map = new Game.Map();\n   29    map.initialize();\n\n597 matches across 134 files\n",
			"settings":
			{
				"buffer_size": 98109,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "models/unit.js",
			"settings":
			{
				"buffer_size": 700,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/army_test.js",
			"settings":
			{
				"buffer_size": 857,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/unit_test.js",
			"settings":
			{
				"buffer_size": 590,
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/_index.js",
			"settings":
			{
				"buffer_size": 120,
				"line_ending": "Unix",
				"name": "module.exports = {"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 581,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/andre/Projects/got/.gitignore"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"console",
			"UNIT_TYPE",
			";",
			"\n  		",
			"\n  			break;\n",
			"  			break;",
			"isCoastal",
			"Wintefell",
			"map.areas['The Narrow Sea']",
			"map.areas['Winterfell']"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"army"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "models/map.js",
					"settings":
					{
						"buffer_size": 4144,
						"regions":
						{
						},
						"selection":
						[
							[
								4020,
								4020
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/memoize.js",
					"settings":
					{
						"buffer_size": 199,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "models/army.js",
					"settings":
					{
						"buffer_size": 405,
						"regions":
						{
						},
						"selection":
						[
							[
								346,
								346
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "tests/map_test.js",
					"settings":
					{
						"buffer_size": 2358,
						"regions":
						{
						},
						"selection":
						[
							[
								763,
								763
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"settings":
					{
						"buffer_size": 98109,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										125,
										132
									],
									[
										355,
										362
									],
									[
										558,
										565
									],
									[
										624,
										631
									],
									[
										650,
										657
									],
									[
										717,
										724
									],
									[
										776,
										783
									],
									[
										896,
										903
									],
									[
										1037,
										1044
									],
									[
										1165,
										1172
									],
									[
										1304,
										1311
									],
									[
										1466,
										1473
									],
									[
										1503,
										1510
									],
									[
										1529,
										1536
									],
									[
										1593,
										1600
									],
									[
										1639,
										1646
									],
									[
										1665,
										1672
									],
									[
										1718,
										1725
									],
									[
										1769,
										1776
									],
									[
										1795,
										1802
									],
									[
										1842,
										1849
									],
									[
										1898,
										1905
									],
									[
										1924,
										1931
									],
									[
										1971,
										1978
									],
									[
										2025,
										2032
									],
									[
										2051,
										2058
									],
									[
										2114,
										2121
									],
									[
										2170,
										2177
									],
									[
										2256,
										2263
									],
									[
										2335,
										2342
									],
									[
										2504,
										2511
									],
									[
										2724,
										2731
									],
									[
										2803,
										2810
									],
									[
										2963,
										2970
									],
									[
										3159,
										3166
									],
									[
										3446,
										3453
									],
									[
										3581,
										3588
									],
									[
										3711,
										3718
									],
									[
										3754,
										3761
									],
									[
										3928,
										3935
									],
									[
										4131,
										4138
									],
									[
										4197,
										4204
									],
									[
										4223,
										4230
									],
									[
										4290,
										4297
									],
									[
										4349,
										4356
									],
									[
										4469,
										4476
									],
									[
										4610,
										4617
									],
									[
										4738,
										4745
									],
									[
										4877,
										4884
									],
									[
										5058,
										5065
									],
									[
										5084,
										5091
									],
									[
										5213,
										5220
									],
									[
										5266,
										5273
									],
									[
										5476,
										5483
									],
									[
										5665,
										5672
									],
									[
										5966,
										5973
									],
									[
										6228,
										6235
									],
									[
										6564,
										6571
									],
									[
										6651,
										6658
									],
									[
										6953,
										6960
									],
									[
										7198,
										7205
									],
									[
										7475,
										7482
									],
									[
										7614,
										7621
									],
									[
										7834,
										7841
									],
									[
										8096,
										8103
									],
									[
										8247,
										8254
									],
									[
										8383,
										8390
									],
									[
										8607,
										8614
									],
									[
										8886,
										8893
									],
									[
										9063,
										9070
									],
									[
										9155,
										9162
									],
									[
										9318,
										9325
									],
									[
										9567,
										9574
									],
									[
										9606,
										9613
									],
									[
										9812,
										9819
									],
									[
										9847,
										9854
									],
									[
										10060,
										10067
									],
									[
										10095,
										10102
									],
									[
										10310,
										10317
									],
									[
										10346,
										10353
									],
									[
										10459,
										10466
									],
									[
										10528,
										10535
									],
									[
										10700,
										10707
									],
									[
										10942,
										10949
									],
									[
										11030,
										11037
									],
									[
										11216,
										11223
									],
									[
										11388,
										11395
									],
									[
										11462,
										11469
									],
									[
										11532,
										11539
									],
									[
										11627,
										11634
									],
									[
										11726,
										11733
									],
									[
										11838,
										11845
									],
									[
										11956,
										11963
									],
									[
										12030,
										12037
									],
									[
										12116,
										12123
									],
									[
										12226,
										12233
									],
									[
										12330,
										12337
									],
									[
										12414,
										12421
									],
									[
										12497,
										12504
									],
									[
										12583,
										12590
									],
									[
										12703,
										12710
									],
									[
										12857,
										12864
									],
									[
										12996,
										13003
									],
									[
										13144,
										13151
									],
									[
										13269,
										13276
									],
									[
										13415,
										13422
									],
									[
										13651,
										13658
									],
									[
										13868,
										13875
									],
									[
										13905,
										13912
									],
									[
										13931,
										13938
									],
									[
										13995,
										14002
									],
									[
										14041,
										14048
									],
									[
										14067,
										14074
									],
									[
										14120,
										14127
									],
									[
										14171,
										14178
									],
									[
										14197,
										14204
									],
									[
										14244,
										14251
									],
									[
										14300,
										14307
									],
									[
										14326,
										14333
									],
									[
										14373,
										14380
									],
									[
										14427,
										14434
									],
									[
										14453,
										14460
									],
									[
										14516,
										14523
									],
									[
										14572,
										14579
									],
									[
										14658,
										14665
									],
									[
										14737,
										14744
									],
									[
										14906,
										14913
									],
									[
										15136,
										15143
									],
									[
										15366,
										15373
									],
									[
										15436,
										15443
									],
									[
										15494,
										15501
									],
									[
										15547,
										15554
									],
									[
										15578,
										15585
									],
									[
										15695,
										15702
									],
									[
										15744,
										15751
									],
									[
										15793,
										15800
									],
									[
										15892,
										15899
									],
									[
										15966,
										15973
									],
									[
										16013,
										16020
									],
									[
										16135,
										16142
									],
									[
										16172,
										16179
									],
									[
										16198,
										16205
									],
									[
										16248,
										16255
									],
									[
										16294,
										16301
									],
									[
										16381,
										16388
									],
									[
										16498,
										16505
									],
									[
										16630,
										16637
									],
									[
										16762,
										16769
									],
									[
										16900,
										16907
									],
									[
										17035,
										17042
									],
									[
										17198,
										17205
									],
									[
										17353,
										17360
									],
									[
										17485,
										17492
									],
									[
										17575,
										17582
									],
									[
										17843,
										17850
									],
									[
										18028,
										18035
									],
									[
										18214,
										18221
									],
									[
										18368,
										18375
									],
									[
										18394,
										18401
									],
									[
										18467,
										18474
									],
									[
										18616,
										18623
									],
									[
										18665,
										18672
									],
									[
										18780,
										18787
									],
									[
										18870,
										18877
									],
									[
										19003,
										19010
									],
									[
										19029,
										19036
									],
									[
										19091,
										19098
									],
									[
										19259,
										19266
									],
									[
										19418,
										19425
									],
									[
										19620,
										19627
									],
									[
										19758,
										19765
									],
									[
										19929,
										19936
									],
									[
										20111,
										20118
									],
									[
										20321,
										20328
									],
									[
										20511,
										20518
									],
									[
										20669,
										20676
									],
									[
										20864,
										20871
									],
									[
										20970,
										20977
									],
									[
										21143,
										21150
									],
									[
										21374,
										21381
									],
									[
										21413,
										21420
									],
									[
										21616,
										21623
									],
									[
										21651,
										21658
									],
									[
										21861,
										21868
									],
									[
										21896,
										21903
									],
									[
										22108,
										22115
									],
									[
										22144,
										22151
									],
									[
										22257,
										22264
									],
									[
										22326,
										22333
									],
									[
										22495,
										22502
									],
									[
										22840,
										22847
									],
									[
										23027,
										23034
									],
									[
										23235,
										23242
									],
									[
										23295,
										23302
									],
									[
										23381,
										23388
									],
									[
										23413,
										23420
									],
									[
										23467,
										23474
									],
									[
										23523,
										23530
									],
									[
										23713,
										23720
									],
									[
										23792,
										23799
									],
									[
										23952,
										23959
									],
									[
										24148,
										24155
									],
									[
										24435,
										24442
									],
									[
										24570,
										24577
									],
									[
										24700,
										24707
									],
									[
										24743,
										24750
									],
									[
										24898,
										24905
									],
									[
										24990,
										24997
									],
									[
										25305,
										25312
									],
									[
										25405,
										25412
									],
									[
										25457,
										25464
									],
									[
										25575,
										25582
									],
									[
										25688,
										25695
									],
									[
										25832,
										25839
									],
									[
										25875,
										25882
									],
									[
										25921,
										25928
									],
									[
										25966,
										25973
									],
									[
										26012,
										26019
									],
									[
										26184,
										26191
									],
									[
										26369,
										26376
									],
									[
										26410,
										26417
									],
									[
										26520,
										26527
									],
									[
										26746,
										26753
									],
									[
										26859,
										26866
									],
									[
										27035,
										27042
									],
									[
										30098,
										30105
									],
									[
										32847,
										32854
									],
									[
										32995,
										33002
									],
									[
										33226,
										33233
									],
									[
										33379,
										33386
									],
									[
										33617,
										33624
									],
									[
										33699,
										33706
									],
									[
										33901,
										33908
									],
									[
										33993,
										34000
									],
									[
										34308,
										34315
									],
									[
										34408,
										34415
									],
									[
										34460,
										34467
									],
									[
										34578,
										34585
									],
									[
										34691,
										34698
									],
									[
										34835,
										34842
									],
									[
										34878,
										34885
									],
									[
										34924,
										34931
									],
									[
										34969,
										34976
									],
									[
										35015,
										35022
									],
									[
										35237,
										35244
									],
									[
										35568,
										35575
									],
									[
										35600,
										35607
									],
									[
										35781,
										35788
									],
									[
										36080,
										36087
									],
									[
										36116,
										36123
									],
									[
										36376,
										36383
									],
									[
										36446,
										36453
									],
									[
										36482,
										36489
									],
									[
										36745,
										36752
									],
									[
										36936,
										36943
									],
									[
										37032,
										37039
									],
									[
										37352,
										37359
									],
									[
										37598,
										37605
									],
									[
										37813,
										37820
									],
									[
										38066,
										38073
									],
									[
										38425,
										38432
									],
									[
										38461,
										38468
									],
									[
										38664,
										38671
									],
									[
										38734,
										38741
									],
									[
										38770,
										38777
									],
									[
										39021,
										39028
									],
									[
										39206,
										39213
									],
									[
										39302,
										39309
									],
									[
										39615,
										39622
									],
									[
										39803,
										39810
									],
									[
										40018,
										40025
									],
									[
										40258,
										40265
									],
									[
										40510,
										40517
									],
									[
										40544,
										40551
									],
									[
										40578,
										40585
									],
									[
										40621,
										40628
									],
									[
										40672,
										40679
									],
									[
										40734,
										40741
									],
									[
										40789,
										40796
									],
									[
										40917,
										40924
									],
									[
										40985,
										40992
									],
									[
										41145,
										41152
									],
									[
										41222,
										41229
									],
									[
										41299,
										41306
									],
									[
										41335,
										41342
									],
									[
										41370,
										41377
									],
									[
										41590,
										41597
									],
									[
										41647,
										41654
									],
									[
										41813,
										41820
									],
									[
										41934,
										41941
									],
									[
										42255,
										42262
									],
									[
										42488,
										42495
									],
									[
										42541,
										42548
									],
									[
										42600,
										42607
									],
									[
										42702,
										42709
									],
									[
										42823,
										42830
									],
									[
										43032,
										43039
									],
									[
										43270,
										43277
									],
									[
										43487,
										43494
									],
									[
										43530,
										43537
									],
									[
										43856,
										43863
									],
									[
										44146,
										44153
									],
									[
										44375,
										44382
									],
									[
										44623,
										44630
									],
									[
										45009,
										45016
									],
									[
										45285,
										45292
									],
									[
										45643,
										45650
									],
									[
										45949,
										45956
									],
									[
										46210,
										46217
									],
									[
										46425,
										46432
									],
									[
										46676,
										46683
									],
									[
										47002,
										47009
									],
									[
										47038,
										47045
									],
									[
										47290,
										47297
									],
									[
										47360,
										47367
									],
									[
										47396,
										47403
									],
									[
										47591,
										47598
									],
									[
										47773,
										47780
									],
									[
										47935,
										47942
									],
									[
										48224,
										48231
									],
									[
										48474,
										48481
									],
									[
										48689,
										48696
									],
									[
										48953,
										48960
									],
									[
										49310,
										49317
									],
									[
										49486,
										49493
									],
									[
										49806,
										49813
									],
									[
										50013,
										50020
									],
									[
										50239,
										50246
									],
									[
										50344,
										50351
									],
									[
										50550,
										50557
									],
									[
										50803,
										50810
									],
									[
										51164,
										51171
									],
									[
										51200,
										51207
									],
									[
										51460,
										51467
									],
									[
										51530,
										51537
									],
									[
										51566,
										51573
									],
									[
										51832,
										51839
									],
									[
										52023,
										52030
									],
									[
										52119,
										52126
									],
									[
										52338,
										52345
									],
									[
										52451,
										52458
									],
									[
										52560,
										52567
									],
									[
										52763,
										52770
									],
									[
										53016,
										53023
									],
									[
										53291,
										53298
									],
									[
										53417,
										53424
									],
									[
										53622,
										53629
									],
									[
										53735,
										53742
									],
									[
										53834,
										53841
									],
									[
										53870,
										53877
									],
									[
										53931,
										53938
									],
									[
										54112,
										54119
									],
									[
										54347,
										54354
									],
									[
										54437,
										54444
									],
									[
										54722,
										54729
									],
									[
										54860,
										54867
									],
									[
										55062,
										55069
									],
									[
										55188,
										55195
									],
									[
										55393,
										55400
									],
									[
										55506,
										55513
									],
									[
										55605,
										55612
									],
									[
										55641,
										55648
									],
									[
										55702,
										55709
									],
									[
										55883,
										55890
									],
									[
										56118,
										56125
									],
									[
										56208,
										56215
									],
									[
										56502,
										56509
									],
									[
										56633,
										56640
									],
									[
										56776,
										56783
									],
									[
										56905,
										56912
									],
									[
										57134,
										57141
									],
									[
										57393,
										57400
									],
									[
										57514,
										57521
									],
									[
										57710,
										57717
									],
									[
										57899,
										57906
									],
									[
										58039,
										58046
									],
									[
										58245,
										58252
									],
									[
										58540,
										58547
									],
									[
										58782,
										58789
									],
									[
										58839,
										58846
									],
									[
										58931,
										58938
									],
									[
										59158,
										59165
									],
									[
										59305,
										59312
									],
									[
										59399,
										59406
									],
									[
										59578,
										59585
									],
									[
										59858,
										59865
									],
									[
										59999,
										60006
									],
									[
										60176,
										60183
									],
									[
										60394,
										60401
									],
									[
										60670,
										60677
									],
									[
										60843,
										60850
									],
									[
										61020,
										61027
									],
									[
										61254,
										61261
									],
									[
										61419,
										61426
									],
									[
										61546,
										61553
									],
									[
										61745,
										61752
									],
									[
										61901,
										61908
									],
									[
										62002,
										62009
									],
									[
										62099,
										62106
									],
									[
										62407,
										62414
									],
									[
										62645,
										62652
									],
									[
										62702,
										62709
									],
									[
										62794,
										62801
									],
									[
										63021,
										63028
									],
									[
										63168,
										63175
									],
									[
										63262,
										63269
									],
									[
										63441,
										63448
									],
									[
										63740,
										63747
									],
									[
										63949,
										63956
									],
									[
										64174,
										64181
									],
									[
										64409,
										64416
									],
									[
										64615,
										64622
									],
									[
										64831,
										64838
									],
									[
										64985,
										64992
									],
									[
										65029,
										65036
									],
									[
										65118,
										65125
									],
									[
										65296,
										65303
									],
									[
										65480,
										65487
									],
									[
										65645,
										65652
									],
									[
										65830,
										65837
									],
									[
										65928,
										65935
									],
									[
										66149,
										66156
									],
									[
										66252,
										66259
									],
									[
										66469,
										66476
									],
									[
										66614,
										66621
									],
									[
										66792,
										66799
									],
									[
										67063,
										67070
									],
									[
										67243,
										67250
									],
									[
										67343,
										67350
									],
									[
										67448,
										67455
									],
									[
										67652,
										67659
									],
									[
										67922,
										67929
									],
									[
										68205,
										68212
									],
									[
										68463,
										68470
									],
									[
										68644,
										68651
									],
									[
										68906,
										68913
									],
									[
										69067,
										69074
									],
									[
										69279,
										69286
									],
									[
										69449,
										69456
									],
									[
										69570,
										69577
									],
									[
										69770,
										69777
									],
									[
										70046,
										70053
									],
									[
										70342,
										70349
									],
									[
										70547,
										70554
									],
									[
										70769,
										70776
									],
									[
										70963,
										70970
									],
									[
										71145,
										71152
									],
									[
										71374,
										71381
									],
									[
										71580,
										71587
									],
									[
										71653,
										71660
									],
									[
										71678,
										71685
									],
									[
										71718,
										71725
									],
									[
										71743,
										71750
									],
									[
										71773,
										71780
									],
									[
										71946,
										71953
									],
									[
										71971,
										71978
									],
									[
										72006,
										72013
									],
									[
										72219,
										72226
									],
									[
										72337,
										72344
									],
									[
										72440,
										72447
									],
									[
										72674,
										72681
									],
									[
										72792,
										72799
									],
									[
										72895,
										72902
									],
									[
										73136,
										73143
									],
									[
										73359,
										73366
									],
									[
										73616,
										73623
									],
									[
										73828,
										73835
									],
									[
										74024,
										74031
									],
									[
										74260,
										74267
									],
									[
										74508,
										74515
									],
									[
										74709,
										74716
									],
									[
										74783,
										74790
									],
									[
										74892,
										74899
									],
									[
										75087,
										75094
									],
									[
										75117,
										75124
									],
									[
										75307,
										75314
									],
									[
										75492,
										75499
									],
									[
										75707,
										75714
									],
									[
										75895,
										75902
									],
									[
										75957,
										75964
									],
									[
										76178,
										76185
									],
									[
										76391,
										76398
									],
									[
										76880,
										76887
									],
									[
										78115,
										78122
									],
									[
										78154,
										78161
									],
									[
										78378,
										78385
									],
									[
										78413,
										78420
									],
									[
										78615,
										78622
									],
									[
										78964,
										78971
									],
									[
										79189,
										79196
									],
									[
										79441,
										79448
									],
									[
										79514,
										79521
									],
									[
										79539,
										79546
									],
									[
										79579,
										79586
									],
									[
										79604,
										79611
									],
									[
										79634,
										79641
									],
									[
										79807,
										79814
									],
									[
										79832,
										79839
									],
									[
										79867,
										79874
									],
									[
										80095,
										80102
									],
									[
										80359,
										80366
									],
									[
										80379,
										80386
									],
									[
										80518,
										80525
									],
									[
										80823,
										80830
									],
									[
										80956,
										80963
									],
									[
										81188,
										81195
									],
									[
										81280,
										81287
									],
									[
										81372,
										81379
									],
									[
										81588,
										81595
									],
									[
										81713,
										81720
									],
									[
										81974,
										81981
									],
									[
										81984,
										81991
									],
									[
										82283,
										82290
									],
									[
										82588,
										82595
									],
									[
										82926,
										82933
									],
									[
										83247,
										83254
									],
									[
										83529,
										83536
									],
									[
										83619,
										83626
									],
									[
										83897,
										83904
									],
									[
										84005,
										84012
									],
									[
										84225,
										84232
									],
									[
										84445,
										84452
									],
									[
										84684,
										84691
									],
									[
										84758,
										84765
									],
									[
										84867,
										84874
									],
									[
										85134,
										85141
									],
									[
										85362,
										85369
									],
									[
										85392,
										85399
									],
									[
										85627,
										85634
									],
									[
										85857,
										85864
									],
									[
										86117,
										86124
									],
									[
										86350,
										86357
									],
									[
										86412,
										86419
									],
									[
										86762,
										86769
									],
									[
										87145,
										87152
									],
									[
										87279,
										87286
									],
									[
										87578,
										87585
									],
									[
										87971,
										87978
									],
									[
										88280,
										88287
									],
									[
										88369,
										88376
									],
									[
										88582,
										88589
									],
									[
										88911,
										88918
									],
									[
										89269,
										89276
									],
									[
										89658,
										89665
									],
									[
										89930,
										89937
									],
									[
										89970,
										89977
									],
									[
										90264,
										90271
									],
									[
										90433,
										90440
									],
									[
										90551,
										90558
									],
									[
										90837,
										90844
									],
									[
										90992,
										90999
									],
									[
										91102,
										91109
									],
									[
										91279,
										91286
									],
									[
										91552,
										91559
									],
									[
										91707,
										91714
									],
									[
										91817,
										91824
									],
									[
										91924,
										91931
									],
									[
										92020,
										92027
									],
									[
										92363,
										92370
									],
									[
										92502,
										92509
									],
									[
										92795,
										92802
									],
									[
										92989,
										92996
									],
									[
										93167,
										93174
									],
									[
										93311,
										93318
									],
									[
										93572,
										93579
									],
									[
										93765,
										93772
									],
									[
										93794,
										93801
									],
									[
										94041,
										94048
									],
									[
										94159,
										94166
									],
									[
										94212,
										94219
									],
									[
										94339,
										94346
									],
									[
										94517,
										94524
									],
									[
										94570,
										94577
									],
									[
										94679,
										94686
									],
									[
										94747,
										94754
									],
									[
										94883,
										94890
									],
									[
										95052,
										95059
									],
									[
										95127,
										95134
									],
									[
										95264,
										95271
									],
									[
										95440,
										95447
									],
									[
										95725,
										95732
									],
									[
										95971,
										95978
									],
									[
										96029,
										96036
									],
									[
										96107,
										96114
									],
									[
										96223,
										96230
									],
									[
										96382,
										96389
									],
									[
										96468,
										96475
									],
									[
										96546,
										96553
									],
									[
										96698,
										96705
									],
									[
										96931,
										96938
									],
									[
										97156,
										97163
									],
									[
										97294,
										97301
									],
									[
										97411,
										97418
									],
									[
										97556,
										97563
									],
									[
										97682,
										97689
									],
									[
										97809,
										97816
									],
									[
										97999,
										98006
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 969.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "models/unit.js",
					"settings":
					{
						"buffer_size": 700,
						"regions":
						{
						},
						"selection":
						[
							[
								590,
								590
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "tests/army_test.js",
					"settings":
					{
						"buffer_size": 857,
						"regions":
						{
						},
						"selection":
						[
							[
								473,
								473
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "tests/unit_test.js",
					"settings":
					{
						"buffer_size": 590,
						"regions":
						{
						},
						"selection":
						[
							[
								70,
								70
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "models/_index.js",
					"settings":
					{
						"buffer_size": 120,
						"regions":
						{
						},
						"selection":
						[
							[
								120,
								120
							]
						],
						"settings":
						{
							"auto_name": "module.exports = {",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "README.md",
					"settings":
					{
						"buffer_size": 581,
						"regions":
						{
						},
						"selection":
						[
							[
								531,
								531
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 163.0,
	"status_bar_visible": true
}
